OBJECT Table 56780 Tapi Logfile
{
  OBJECT-PROPERTIES
  {
    Date=06.11.09;
    Time=10:00:00;
    Modified=Yes;
    Version List=AT2009;
  }
  PROPERTIES
  {
    CaptionML=[DEU=TAPI Logbuch;
               ENU=TAPI Logfile];
    LookupPageID=Page56784;
    DrillDownPageID=Page56784;
  }
  FIELDS
  {
    { 1   ;   ;Key local           ;Text40        ;CaptionML=[DEU=SchlÅssel lokal;
                                                              ENU=Key local];
                                                   Description=GUID }
    { 2   ;   ;Date                ;Date          ;CaptionML=[DEU=Datum;
                                                              ENU=Date];
                                                   Description=Date }
    { 3   ;   ;Time                ;Time          ;CaptionML=[DEU=Zeit;
                                                              ENU=Time];
                                                   Description=Time }
    { 4   ;   ;User                ;Code20        ;CaptionML=[DEU=Benutzer;
                                                              ENU=User];
                                                   Description=USERID }
    { 5   ;   ;UserInfo            ;Text120       ;CaptionML=[DEU=UserInfo;
                                                              ENU=UserInfo] }
    { 6   ;   ;UserInfo1           ;Text120       ;CaptionML=[DEU=UserInfo1;
                                                              ENU=UserInfo1] }
    { 7   ;   ;UserInfo2           ;Text120       ;CaptionML=[DEU=UserInfo2;
                                                              ENU=UserInfo2] }
    { 8   ;   ;Direction           ;Option        ;CaptionML=[DEU=Richtung;
                                                              ENU=Direction];
                                                   OptionCaptionML=[DEU=ausgehend,eingehend;
                                                                    ENU=out,in];
                                                   OptionString=out,in }
    { 10  ;   ;Entry No.           ;Integer       ;CaptionML=[DEU=Lfd. Nr.;
                                                              ENU=Entry No.] }
    { 12  ;   ;Duration (Sec.)     ;Decimal       ;CaptionML=[DEU=Dauer (Sec.);
                                                              ENU=Duration (Sec.)] }
    { 13  ;   ;State (rough)       ;Text10        ;CaptionML=[DEU=Status (roh);
                                                              ENU=State (rough)] }
    { 14  ;   ;State               ;Option        ;CaptionML=[DEU=Status;
                                                              ENU=State];
                                                   OptionCaptionML=[DEU=" ,verbunden,nicht verbunden";
                                                                    ENU=" ,connected,not connected"];
                                                   OptionString=[ ,connected,not connected] }
    { 15  ;   ;External            ;Boolean       ;CaptionML=[DEU=Extern;
                                                              ENU=External] }
    { 20  ;   ;Caller ID           ;Text30        ;CaptionML=[DEU=Anrufer ID;
                                                              ENU=Caller ID];
                                                   Description=Caller ID }
    { 21  ;   ;Called ID           ;Text30        ;CaptionML=[DEU=Angerufener ID;
                                                              ENU=Called ID];
                                                   Description=Called ID }
    { 22  ;   ;Connected ID        ;Text30        ;CaptionML=[DEU=Verbunden ID;
                                                              ENU=Connected ID];
                                                   Description=Connected ID }
    { 23  ;   ;Redirection ID      ;Text30        ;CaptionML=[DEU=Weiterleitungsziel ID;
                                                              ENU=Redirection ID];
                                                   Description=Redirection ID }
    { 24  ;   ;Redirecting ID      ;Text30        ;CaptionML=[DEU=Weiterleiter ID;
                                                              ENU=Redirecting ID];
                                                   Description=Redirecting ID }
    { 25  ;   ;Key global          ;Text40        ;CaptionML=[DEU=SchlÅssel zentral;
                                                              ENU=Key global];
                                                   Description=CallData }
    { 30  ;   ;Caller ID Name      ;Text50        ;CaptionML=[DEU=Anrufer ID Name;
                                                              ENU=Caller ID Name] }
    { 31  ;   ;Called ID Name      ;Text50        ;CaptionML=[DEU=Angerufener ID Name;
                                                              ENU=Called ID Name] }
    { 32  ;   ;Connected ID Name   ;Text50        ;CaptionML=[DEU=Verbunden ID Name;
                                                              ENU=Connected ID Name] }
    { 33  ;   ;Redirection ID Name ;Text50        ;CaptionML=[DEU=Weiterleitungsziel ID Name;
                                                              ENU=Redirection ID Name] }
    { 34  ;   ;Redirecting ID Name ;Text50        ;CaptionML=[DEU=Weiterleiter ID Name;
                                                              ENU=Redirecting ID Name] }
    { 35  ;   ;Origin              ;Integer       ;CaptionML=[DEU=Herkunft;
                                                              ENU=Origin] }
    { 40  ;   ;Table of origin     ;Integer       ;CaptionML=[DEU=Herkunfts-Tabelle;
                                                              ENU=Table of origin] }
    { 41  ;   ;No. of origin       ;Code20        ;CaptionML=[DEU=Herkunfts-Nr.;
                                                              ENU=No. of origin] }
    { 42  ;   ;No. 2 of origin     ;Code20        ;CaptionML=[DEU=Herkunfts-Nr. 2;
                                                              ENU=No. 2 of origin] }
    { 43  ;   ;Name of origin      ;Text50        ;CaptionML=[DEU=Herkunfts-Name;
                                                              ENU=Name of origin] }
    { 50  ;   ;Closed              ;Boolean       ;CaptionML=[DEU=Erledigt;
                                                              ENU=Closed] }
    { 60  ;   ;Reference           ;Text30        ;CaptionML=[DEU=Bezug;
                                                              ENU=Reference] }
    { 61  ;   ;Note                ;Text80        ;CaptionML=[DEU=Bemerkung;
                                                              ENU=Note] }
    { 70  ;   ;Remote ID           ;Text30        ;CaptionML=[DEU=Partner ID;
                                                              ENU=Remote ID];
                                                   Description=Remote ID }
    { 71  ;   ;Remote ID Name      ;Text50        ;CaptionML=[DEU=Partner ID Name;
                                                              ENU=Remote ID Name];
                                                   Description=Remote ID Name }
    { 80  ;   ;Local ID            ;Text30        ;CaptionML=[DEU=Lokale ID;
                                                              ENU=Local ID];
                                                   Description=Local ID }
    { 81  ;   ;Local ID Name       ;Text50        ;CaptionML=[DEU=Lokale ID Name;
                                                              ENU=Local ID Name];
                                                   Description=Local ID Name }
  }
  KEYS
  {
    {    ;Key local                               ;Clustered=Yes }
    {    ;Key global                               }
    {    ;Entry No.                                }
    {    ;User,State,Closed,Date,Time              }
    {    ;Date,Time                                }
    {    ;User,Entry No.                           }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      AT01.20       08.09.2003  New Fields: 70 Remote ID        Text 30
                                            71 Remote ID Name   Text 30
                                            80 Local ID         Text 30
                                            81 Local ID Name    Text 30

      AT05.00       16.06.2007  Length of all name-fields changed form 30 to 50
      AT2009        06.11.2009  New Index User,Entry No. for List per User
    }
    END.
  }
}

OBJECT Table 56781 Phone Index
{
  OBJECT-PROPERTIES
  {
    Date=06.11.09;
    Time=10:00:00;
    Modified=Yes;
    Version List=AT2009;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Telefon-Index;
               ENU=Phone Index];
  }
  FIELDS
  {
    { 1   ;   ;Table of origin     ;Integer       ;CaptionML=[DEU=Herkunfts-Tabelle;
                                                              ENU=Table of origin] }
    { 2   ;   ;No. of origin       ;Code20        ;CaptionML=[DEU=Herkunfts-Nr.;
                                                              ENU=No. of origin] }
    { 3   ;   ;No. 2 of origin     ;Code20        ;CaptionML=[DEU=Herkunfts-Nr 2;
                                                              ENU=No. 2 of origin] }
    { 4   ;   ;Type of origin      ;Option        ;CaptionML=[DEU=Herkunftsart;
                                                              ENU=Type of origin];
                                                   OptionCaptionML=[DEU=dienstlich,privat,mobil,zweite,Durchwahl;
                                                                    ENU=business,private,mobile,second,extension];
                                                   OptionString=business,private,mobile,second,extension }
    { 5   ;   ;Name of origin      ;Text50        ;CaptionML=[DEU=Herkunfts-Name;
                                                              ENU=Name of origin] }
    { 6   ;   ;Phone No.           ;Text30        ;CaptionML=[DEU=Telefon-Nr.;
                                                              ENU=Phone No.] }
    { 7   ;   ;Blocked             ;Boolean       ;CaptionML=[DEU=Gesperrt;
                                                              ENU=Blocked] }
  }
  KEYS
  {
    {    ;Table of origin,No. of origin,No. 2 of origin,Type of origin,Blocked;
                                                   Clustered=Yes }
    {    ;Phone No.,Blocked                        }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      AT05.00       16.06.2007  Length of name-field changed form 30 to 50
      AT2009        06.11.2009  New Field "Blocked"; Field "Blocked" added to all Index-Keys
    }
    END.
  }
}

OBJECT Table 56782 TAPI Setup
{
  OBJECT-PROPERTIES
  {
    Date=02.12.14;
    Time=13:00:00;
    Modified=Yes;
    Version List=AT2015;
  }
  PROPERTIES
  {
    CaptionML=[DEU=TAPI Einrichtung;
               ENU=TAPI Setup];
  }
  FIELDS
  {
    { 1   ;   ;Primary key         ;Code10        ;CaptionML=[DEU=PrimÑrschlÅssel;
                                                              ENU=Primary key] }
    { 10  ;   ;Length of internal phone No.;Integer;
                                                   CaptionML=[DEU=LÑnge interne Rufnummer;
                                                              ENU=Length of internal phone No.] }
    { 20  ;   ;Action for incoming call;Option    ;CaptionML=[DEU=Aktion eingehende Anrufe;
                                                              ENU=Action for incoming call];
                                                   OptionCaptionML=[DEU=" ,Anrufer kurz anzeigen,Karte anzeigen,Auswahl anzeigen";
                                                                    ENU=" ,Show caller for short time,Show card,Show menu"];
                                                   OptionString=[ ,Show caller for short time,Show card,Show menu] }
    { 30  ;   ;Create call data    ;Boolean       ;CaptionML=[DEU=Anrufdaten erstellen;
                                                              ENU=Create call data];
                                                   Description=fÅr Weiterleitung / for Redirection }
    { 40  ;   ;TAPI line name      ;Text50        ;TableRelation="TAPI Line";
                                                   CaptionML=[DEU=Name TAPI Leitung;
                                                              ENU=TAPI line name] }
    { 50  ;   ;Trace level         ;Integer       ;InitValue=4;
                                                   CaptionML=[DEU=Verfolgung Stufe;
                                                              ENU=Trace level] }
    { 60  ;   ;Min. length fÅr Phoneindex;Integer ;CaptionML=[DEU=MindestlÑnge fÅr Telefonindex;
                                                              ENU=Min. length fÅr Phoneindex] }
    { 70  ;   ;Format Phone Numbers;Boolean       ;CaptionML=[DEU=Telefon-Nummern formatieren;
                                                              ENU=Format Phone Numbers] }
    { 80  ;   ;Format Fax Numbers  ;Boolean       ;CaptionML=[DEU=Fax-Nummern formatieren;
                                                              ENU=Format Fax Numbers] }
    { 90  ;   ;Check of double numbers;Option     ;CaptionML=DEU=PrÅfung doppelte Nummern;
                                                   OptionCaptionML=[DEU=immer,nur ungesperrte Nummern,nie;
                                                                    ENU=allways,only unblocked numbers,never];
                                                   OptionString=allways,only unblocked numbers,never }
    { 100 ;   ;Create Interaction Log Entry;Boolean;
                                                   CaptionML=[DEU=AktivitÑts-Protokollposten erstellen;
                                                              ENU=Create Interaction Log Entry] }
    { 110 ;   ;Log internal calls  ;Boolean       ;CaptionML=[DEU=Interne Anrufe in Logbuch;
                                                              ENU=Log internal calls] }
    { 120 ;   ;Runs in Developer Mode;Boolean     ;CaptionML=[DEU=LÑuft im Entwickler Modus;
                                                              ENU=Runs in Developer Mode] }
  }
  KEYS
  {
    {    ;Primary key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      AT01.20     08.09.2003  New fields: 60 Min. length fÅr Phoneindex Integer
                                          70 Format Phone Numbers
      AT04.00     04.11.2005  New field:  80 Format Fax Numbers
      AT2009      06.11.2009  New field:  90 Check of double numbers (in Phone Index)
                                          100 Create Interaction Log Entry
      AT2011      05.04.2011  New field:  110 Log internal calls
      AT2015      02.12.2014  New field:  120 Runs in Developer Mode
    }
    END.
  }
}

OBJECT Table 56783 TAPI User
{
  OBJECT-PROPERTIES
  {
    Date=06.11.09;
    Time=10:00:00;
    Modified=Yes;
    Version List=AT2009;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               VALIDATE(User);
             END;

    CaptionML=[DEU=TAPI Benutzer;
               ENU=TAPI User];
    LookupPageID=Page56783;
    DrillDownPageID=Page56783;
  }
  FIELDS
  {
    { 1   ;   ;User                ;Code20        ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                IF User = '' THEN BEGIN
                                                                  ERROR(Text100);
                                                                END ELSE BEGIN
                                                                  IF UserSetup.GET(User) THEN BEGIN
                                                                    IF NOT UserSetup."Use activeTAPI" THEN
                                                                      ERROR(Text102,User);
                                                                  END ELSE BEGIN
                                                                    ERROR(Text101,User);
                                                                  END;
                                                                END;
                                                              END;

                                                   CaptionML=[DEU=Benutzer;
                                                              ENU=User] }
    { 10  ;   ;Action for incoming call;Option    ;CaptionML=[DEU=Aktion bei eingehendem Anruf;
                                                              ENU=Action for incoming call];
                                                   OptionCaptionML=[DEU=" ,Anrufer kurz anzeigen,Karte anzeigen,Auswahl anzeigen";
                                                                    ENU=" ,Show caller for short time,Show card,Show menu"];
                                                   OptionString=[ ,Show caller for short time,Show card,Show menu] }
    { 11  ;   ;Action for new ext. Phone No.;Option;
                                                   CaptionML=[DEU=Aktion bei neuer ext. Telefon-Nr.;
                                                              ENU=Action for new ext. Phone No.];
                                                   OptionCaptionML=[DEU=" ,Kontakt-Karte îffnen,Auswahl anzeigen";
                                                                    ENU=" ,Open Contact Card,Show menu"];
                                                   OptionString=[ ,Open Contact Card,Show menu] }
    { 20  ;   ;Start activeTAPI Dialer;Boolean    ;CaptionML=[DEU=activeTAPI Dialer starten;
                                                              ENU=Start activeTAPI Dialer] }
    { 21  ;   ;Directory of dialer ;Text150       ;CaptionML=[DEU=Verzeichnis des Dialers;
                                                              ENU=Directory of dialer] }
    { 30  ;   ;TAPI line name      ;Text50        ;TableRelation="TAPI Line";
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[DEU=Name TAPI Leitung;
                                                              ENU=TAPI line name] }
    { 90  ;   ;Blocked             ;Boolean       ;CaptionML=[DEU=Gesperrt;
                                                              ENU=Blocked];
                                                   Editable=No }
    { 100 ;   ;Action for end of incom. call;Option;
                                                   CaptionML=DEU=Aktion Ende eingeh. Anruf;
                                                   OptionCaptionML=[DEU=Bezug/Bemerkung,keine;
                                                                    ENU=Reference/Note,none];
                                                   OptionString=Reference/Note,none }
    { 110 ;   ;Action for end of outgo. call;Option;
                                                   CaptionML=DEU=Aktion Ende ausgeh. Anruf;
                                                   OptionCaptionML=[DEU=Bezug/Bemerkung,keine;
                                                                    ENU=Reference/Note,none];
                                                   OptionString=Reference/Note,none }
    { 200 ;   ;HelpField           ;Text30        ;CaptionML=[DEU=Hilfsfeld;
                                                              ENU=HelpField] }
    { 201 ;   ;GUIDTemp            ;Text40        ;CaptionML=[DEU=Lokaler SchlÅssel temp;
                                                              ENU=GUIDTemp] }
    { 202 ;   ;BLOBTemp            ;BLOB          ;CaptionML=[DEU=BLOBTemp;
                                                              ENU=BLOBTemp] }
  }
  KEYS
  {
    {    ;User                                    ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      UserSetup@1000 : Record 91;
      Text100@1001 : TextConst 'DEU=Benutzer darf nicht leer sein.;ENU=User may not be empty.';
      Text101@1002 : TextConst 'DEU=Benutzer %1 ist nicht in Benutzer Einrichtung angelegt.;ENU=User %1 is not definded in User Setup.';
      Text102@1003 : TextConst 'DEU=Benutzer %1 ist nicht fÅr activeTAPI freigegeben.;ENU=User %1 is not allowed to use activeTAPI.';
      TAPIEinr@1004 : Record 56782;
      Text103@1005 : TextConst 'DEU=Sie kînnen TAPI Leitungsname nur eingeben, wenn in der TAPI Einrichtung Leitungszuordnung per Benutzer eingegeben wurde.;ENU=You can input TAPI Line name only, if in the TAPI Setup TAPI Line selection is per User.';

    BEGIN
    {
      AT2009           06.11.2009 New field: Action for end of incom. call     Reference/Note,none
                                             Action for end of outgo. call     Reference/Note,none
    }
    END.
  }
}

OBJECT Table 56784 TAPI Line
{
  OBJECT-PROPERTIES
  {
    Date=16.09.08;
    Time=20:30:00;
    Modified=Yes;
    Version List=AT01;
  }
  PROPERTIES
  {
    CaptionML=[DEU=TAPI Leitung;
               ENU=TAPI Line];
    LookupPageID=Page56787;
    DrillDownPageID=Page56787;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[DEU=Lfd. Nr.;
                                                              ENU=Entry No.] }
    { 2   ;   ;TAPI Line name      ;Text50        ;CaptionML=[DEU=TAPI Leitung;
                                                              ENU=TAPI Line name] }
  }
  KEYS
  {
    {    ;TAPI Line name,Entry No.                ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 56785 Note for Phone-Index
{
  OBJECT-PROPERTIES
  {
    Date=16.09.08;
    Time=20:30:00;
    Modified=Yes;
    Version List=AT01;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Hinweis Telefon-Index;
               ENU=Note for Phone-Index];
  }
  FIELDS
  {
    { 1   ;   ;Lfd.Nr.             ;Integer       ;CaptionML=[DEU=Lfd.Nr.;
                                                              ENU=Entry No.] }
    { 2   ;   ;Text                ;Text150       ;CaptionML=[DEU=Text;
                                                              ENU=Text] }
  }
  KEYS
  {
    {    ;Lfd.Nr.                                 ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Table 56786 Phone Index Temp
{
  OBJECT-PROPERTIES
  {
    Date=26.08.10;
    Time=22:00:00;
    Modified=Yes;
    Version List=AT05.00;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Telefon-Index temp;
               ENU=Phone Index temp];
  }
  FIELDS
  {
    { 1   ;   ;Table of origin     ;Integer       ;CaptionML=[DEU=Herkunfts-Tabelle;
                                                              ENU=Table of origin] }
    { 2   ;   ;No. of origin       ;Code20        ;CaptionML=[DEU=Herkunfts-Nr.;
                                                              ENU=No. of origin] }
    { 3   ;   ;No. 2 of origin     ;Code20        ;CaptionML=[DEU=Herkunfts-Nr 2;
                                                              ENU=No. 2 of origin] }
    { 4   ;   ;Type of origin      ;Option        ;CaptionML=[DEU=Herkunftsart;
                                                              ENU=Type of origin];
                                                   OptionCaptionML=[DEU=dienstlich,privat,mobil,zweite,Durchwahl;
                                                                    ENU=business,private,mobile,second,extension];
                                                   OptionString=business,private,mobile,second,extension }
    { 5   ;   ;Name of origin      ;Text50        ;CaptionML=[DEU=Herkunfts-Name;
                                                              ENU=Name of origin] }
    { 6   ;   ;Phone No.           ;Text30        ;CaptionML=[DEU=Telefon-Nr.;
                                                              ENU=Phone No.] }
    { 8   ;   ;Table Name          ;Text50        ;CaptionML=[DEU=Tabellen-Name;
                                                              ENU=Table Name] }
  }
  KEYS
  {
    {    ;Table of origin,No. of origin,No. 2 of origin,Type of origin;
                                                   Clustered=Yes }
    {    ;Phone No.                                }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    {
      AT05.00       16.06.2007  Length of name-field changed form 30 to 50
      AT2009        26.08.2010  Field No. of Table Name changed from 7 to 8 (error in searching Phone No.)
    }
    END.
  }
}

OBJECT Report 56780 Fill Phone Index
{
  OBJECT-PROPERTIES
  {
    Date=02.12.14;
    Time=13:00:00;
    Modified=Yes;
    Version List=AO,AT2015;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Telefon-Index fÅllen;
               ENU=Fill Phone Index];
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   IF TAPIFu.TAPIRights < 2 THEN
                     ERROR(Text1010,USERID);
                 END;

    OnPreReport=BEGIN
                  Window.OPEN('Telefon-Index wird vorbereitet ... ');

                  TelInd.DELETEALL;
                  Hinw.DELETEALL;
                  COMMIT;

                  LfdNr := 0;
                  Window.CLOSE;

                  // AT2009 INSERTED
                  TAPIEinr.GET;
                  // AT2009 END

                  CREATE(ATPhoneNumber,TRUE,TRUE);

                  Window.OPEN(Text001 + ' #1######## #2############################');
                END;

    OnPostReport=BEGIN
                   Window.CLOSE;

                   CLEAR(ATPhoneNumber);
                 END;

  }
  DATASET
  {
    { 6836;    ;DataItem;                    ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               Window.UPDATE(1, Text002);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF ("Phone No." <> '') THEN BEGIN
                                    Window.UPDATE(2, "No.");

                                  // AT2009 BEGIN
                                    IF TAPIEinr."Check of double numbers" = TAPIEinr."Check of double numbers"::never THEN BEGIN
                                    END ELSE BEGIN
                                  // AT2009 END

                                  // Check for Double for Phone No. in the same table
                                  // Dubletten-PrÅfung fÅr Telefonnr. in gleicher Tabelle
                                      IF "Phone No." <> '' THEN BEGIN
                                        PhoneNo := TAPIFu.ConvToPlain("Phone No.",FALSE);
                                        TelIndex.RESET;
                                        TelIndex.SETCURRENTKEY("Phone No.");
                                        TelIndex.SETRANGE("Phone No.",PhoneNo);
                                        TelIndex.SETRANGE("Table of origin", 18);
                                        TelIndex.SETFILTER("No. of origin", '<>%1',"No.");
                                  // AT2009 BEGIN
                                        IF TAPIEinr."Check of double numbers" = TAPIEinr."Check of double numbers"::"only unblocked numbers" THEN
                                          TelIndex.SETRANGE(Blocked, FALSE);
                                  // AT2009 END
                                        IF TelIndex.FIND('-') THEN BEGIN
                                          Hinw.INIT;
                                          LfdNr := LfdNr + 1;
                                          Hinw."Lfd.Nr." := LfdNr;
                                          Hinw.Text := STRSUBSTNO(Text1008, TABLECAPTION, "No.", FIELDCAPTION("Phone No."),
                                            "Phone No.", TABLECAPTION, TelIndex."No. of origin");
                                          Hinw.INSERT;
                                        END;
                                      END;

                                  // AT2009 BEGIN
                                    END;
                                  // AT2009 END

                                    TelIndex.RESET;
                                    TelIndex.SETRANGE("Table of origin", 18);
                                    TelIndex.SETRANGE("No. of origin", "No.");
                                    IF TelIndex.FIND('-') THEN
                                      TelIndex.DELETEALL;
                                    TelIndex.RESET;

                                  // AT2011 CHANGE
                                    IF ("Phone No." <> '') AND (STRLEN("Phone No.") > TAPIEinr."Min. length fÅr Phoneindex") THEN BEGIN
                                  // AT2011 END:
                                      TelIndex.INIT;
                                      TelIndex."Table of origin"   := 18;
                                      TelIndex."No. of origin"     := "No.";
                                      TelIndex."No. 2 of origin"   := '';
                                      TelIndex."Type of origin"    := TelIndex."Type of origin"::business;
                                      TelIndex."Name of origin"    := Name;
                                      TelIndex."Phone No."         := TAPIFu.ConvToPlain("Phone No.",FALSE);
                                  // AT2009 BEGIN
                                      IF Blocked = Blocked::All THEN
                                        TelIndex.Blocked           := TRUE
                                      ELSE
                                        TelIndex.Blocked           := FALSE;
                                  // AT 2009 END
                                      TelIndex.INSERT;
                                    END;

                                  // AT2011 START
                                    IF FormatExistPhonoNo THEN BEGIN
                                      "Phone No." := TAPIFuSi.ConvToCanonic("Phone No.");
                                      MODIFY;
                                    END;
                                    IF FormatExistFaxNo THEN BEGIN
                                      "Fax No." := TAPIFuSi.ConvToCanonic("Fax No.");
                                      MODIFY;
                                    END;
                                  // AT2011 END

                                  END;
                                END;
                                 }

    { 3182;    ;DataItem;                    ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               Window.UPDATE(1, Text003);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF "Phone No." <> '' THEN BEGIN
                                    Window.UPDATE(2, "No.");

                                  // AT2009 BEGIN
                                    IF TAPIEinr."Check of double numbers" = TAPIEinr."Check of double numbers"::never THEN BEGIN
                                    END ELSE BEGIN
                                  // AT2009 END

                                  // Check for Double for Phone No. in the same table
                                  // Dubletten-PrÅfung fÅr Telefonnr. in gleicher Tabelle
                                      IF "Phone No." <> '' THEN BEGIN
                                        PhoneNo := TAPIFu.ConvToPlain("Phone No.",FALSE);
                                        TelIndex.RESET;
                                        TelIndex.SETCURRENTKEY("Phone No.");
                                        TelIndex.SETRANGE("Phone No.",PhoneNo);
                                        TelIndex.SETRANGE("Table of origin", 23);
                                        TelIndex.SETFILTER("No. of origin", '<>%1',"No.");
                                  // AT2009 BEGIN
                                        IF TAPIEinr."Check of double numbers" = TAPIEinr."Check of double numbers"::"only unblocked numbers" THEN
                                          TelIndex.SETRANGE(Blocked, FALSE);
                                  // AT2009 END
                                        IF TelIndex.FIND('-') THEN BEGIN
                                          Hinw.INIT;
                                          LfdNr := LfdNr + 1;
                                          Hinw."Lfd.Nr." := LfdNr;
                                          Hinw.Text := STRSUBSTNO(Text1008, TABLECAPTION, "No.", FIELDCAPTION("Phone No."),
                                            "Phone No.", TABLECAPTION, TelIndex."No. of origin");
                                          Hinw.INSERT;
                                        END;
                                      END;
                                  // AT2009 BEGIN
                                    END;
                                  // AT2009 END

                                    TelIndex.RESET;
                                    TelIndex.SETRANGE("Table of origin", 23);
                                    TelIndex.SETRANGE("No. of origin", "No.");
                                    IF TelIndex.FIND('-') THEN
                                      TelIndex.DELETEALL;
                                    TelIndex.RESET;

                                  // AT2011 CHANGE
                                    IF ("Phone No." <> '') AND (STRLEN("Phone No.") > TAPIEinr."Min. length fÅr Phoneindex") THEN BEGIN
                                  // AT2011 END
                                      TelIndex.INIT;
                                      TelIndex."Table of origin"   := 23;
                                      TelIndex."No. of origin"     := "No.";
                                      TelIndex."No. 2 of origin"   := '';
                                      TelIndex."Type of origin"    := TelIndex."Type of origin"::business;
                                      TelIndex."Name of origin"    := Name;
                                      TelIndex."Phone No."         := TAPIFu.ConvToPlain("Phone No.",FALSE);
                                  // AT2009 BEGIN
                                      IF Blocked = Blocked::All THEN
                                        TelIndex.Blocked           := TRUE
                                      ELSE
                                        TelIndex.Blocked           := FALSE;
                                  // AT 2009 END
                                      TelIndex.INSERT;
                                    END;

                                  // AT2011 START
                                    IF FormatExistPhonoNo THEN BEGIN
                                      "Phone No." := TAPIFuSi.ConvToCanonic("Phone No.");
                                      MODIFY;
                                    END;
                                    IF FormatExistFaxNo THEN BEGIN
                                      "Fax No." := TAPIFuSi.ConvToCanonic("Fax No.");
                                      MODIFY;
                                    END;
                                  // AT2011 END

                                  END;
                                END;
                                 }

    { 6698;    ;DataItem;                    ;
               DataItemTable=Table5050;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               Window.UPDATE(1, Text005);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF ("Phone No." <> '') OR ("Mobile Phone No." <> '') THEN BEGIN
                                    Window.UPDATE(2, "No.");

                                  // AT2009 BEGIN
                                    IF TAPIEinr."Check of double numbers" = TAPIEinr."Check of double numbers"::never THEN BEGIN
                                    END ELSE BEGIN
                                  // AT2009 END

                                  // Check for Double for Phone No. in the same table
                                  // Dubletten-PrÅfung fÅr Telefonnr. in der gleichen Tabelle
                                      IF "Phone No." <> '' THEN BEGIN
                                        IF ("Phone No." = "Mobile Phone No.") THEN BEGIN
                                          Hinw.INIT;
                                          LfdNr := LfdNr + 1;
                                          Hinw."Lfd.Nr." := LfdNr;
                                          Hinw.Text := STRSUBSTNO(Text1011, "No.");
                                          Hinw.INSERT;
                                        END;
                                        PhoneNo := TAPIFu.ConvToPlain("Phone No.",FALSE);
                                        TelIndex.RESET;
                                        TelIndex.SETCURRENTKEY("Phone No.");
                                        TelIndex.SETRANGE("Phone No.",PhoneNo);
                                        TelIndex.SETRANGE("Table of origin", 5050);
                                        TelIndex.SETFILTER("No. of origin", '<>%1',"No.");
                                  // AT2009 BEGIN
                                        IF TAPIEinr."Check of double numbers" = TAPIEinr."Check of double numbers"::"only unblocked numbers" THEN
                                          TelIndex.SETRANGE(Blocked, FALSE);
                                  // AT2009 END
                                        IF TelIndex.FIND('-') THEN BEGIN
                                          Hinw.INIT;
                                          LfdNr := LfdNr + 1;
                                          Hinw."Lfd.Nr." := LfdNr;
                                          Hinw.Text := STRSUBSTNO(Text1012, "No.", "Phone No.",
                                            TABLECAPTION, TelIndex."No. of origin");
                                          Hinw.INSERT;
                                        END;
                                      END;

                                  // Check for Double for Mobile Phone No. in the same table
                                  // Dubletten-PrÅfung fÅr Mobiltelefonnr. in der gleichen Tabelle
                                      IF "Mobile Phone No." <> '' THEN BEGIN
                                        IF ("Mobile Phone No." = "Phone No.") THEN BEGIN
                                          Hinw.INIT;
                                          LfdNr := LfdNr + 1;
                                          Hinw."Lfd.Nr." := LfdNr;
                                          Hinw.Text := STRSUBSTNO(Text1011, "No.");
                                          Hinw.INSERT;
                                        END;
                                        PhoneNo := TAPIFu.ConvToPlain("Mobile Phone No.",FALSE);
                                        TelIndex.RESET;
                                        TelIndex.SETCURRENTKEY("Phone No.");
                                        TelIndex.SETRANGE("Phone No.",PhoneNo);
                                        TelIndex.SETRANGE("Table of origin", 5050);
                                        TelIndex.SETFILTER("No. of origin", '<>%1',"No.");
                                  // AT2009 BEGIN
                                        IF TAPIEinr."Check of double numbers" = TAPIEinr."Check of double numbers"::"only unblocked numbers" THEN
                                          TelIndex.SETRANGE(Blocked, FALSE);
                                  // AT2009 END
                                        IF TelIndex.FIND('-') THEN BEGIN
                                          Hinw.INIT;
                                          LfdNr := LfdNr + 1;
                                          Hinw."Lfd.Nr." := LfdNr;
                                          Hinw.Text := STRSUBSTNO(Text1012, "No.", "Mobile Phone No.",
                                            TABLECAPTION, TelIndex."No. of origin");
                                          Hinw.INSERT;
                                        END;
                                      END;

                                  // AT2009 BEGIN
                                    END;
                                  // AT2009 END

                                    TelIndex.RESET;
                                    TelIndex.SETRANGE("Table of origin", 5050);
                                    TelIndex.SETRANGE("No. of origin", "No.");
                                    IF TelIndex.FIND('-') THEN
                                      TelIndex.DELETEALL;
                                    TelIndex.RESET;

                                  // AT2011 START
                                    IF ("Phone No." <> '') AND (STRLEN("Phone No.") > TAPIEinr."Min. length fÅr Phoneindex") THEN BEGIN
                                  // AT2011 END
                                      TelIndex.INIT;
                                      TelIndex."Table of origin"   := 5050;
                                      TelIndex."No. of origin"     := "No.";
                                      TelIndex."No. 2 of origin"   := '';
                                      TelIndex."Type of origin"    := TelIndex."Type of origin"::business;
                                      TelIndex."Name of origin"    := Name;
                                      TelIndex."Phone No."         := TAPIFu.ConvToPlain("Phone No.",FALSE);
                                      TelIndex.INSERT;
                                    END;

                                  // AT2011 START
                                    IF ("Mobile Phone No." <> '') AND (STRLEN("Mobile Phone No.") > TAPIEinr."Min. length fÅr Phoneindex") THEN BEGIN
                                  // AT2011 END
                                      TelIndex.INIT;
                                      TelIndex."Table of origin"   := 5050;
                                      TelIndex."No. of origin"     := "No.";
                                      TelIndex."No. 2 of origin"   := '';
                                      TelIndex."Type of origin"    := TelIndex."Type of origin"::mobile;
                                      TelIndex."Name of origin"    := Name;
                                      TelIndex."Phone No."         := TAPIFu.ConvToPlain("Mobile Phone No.",FALSE);
                                      TelIndex.INSERT;
                                    END;

                                  // AT2011 START
                                    IF FormatExistPhonoNo THEN BEGIN
                                      "Phone No." := TAPIFuSi.ConvToCanonic("Phone No.");
                                      "Mobile Phone No." := TAPIFuSi.ConvToCanonic("Mobile Phone No.");
                                      MODIFY;
                                    END;
                                    IF FormatExistFaxNo THEN BEGIN
                                      "Fax No." := TAPIFuSi.ConvToCanonic("Fax No.");
                                      MODIFY;
                                    END;
                                  // AT2011 END

                                  END;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=BEGIN
                   HintText := Text1013;
                 END;

    }
    CONTROLS
    {
      { 1000000000;;Container;
                  ContainerType=ContentArea }

      { 1000000001;1;Group  ;
                  GroupType=Group }

      { 1000000004;2;Field  ;
                  CaptionML=[DEU=Mit diesem Report (nur Verarbeitung) wird einmalig zu Beginn der Arbeit mit activeTAPI-Navi der Telefon-Index fÅr die Telefonnummern-Schnellsuche gefÅllt. Optional kînnen die vorhandenen Telefon- und Fax-Nummern formatiert werden.;
                             ENU=When starting to work with activeTAPI-Navi you use this report once (processing only) to fill the Phone Index (fÅr Phone No. Quick Search). Existing Phone / Fax Nos can be formatted.] }

      { 1000000002;2;Field  ;
                  CaptionML=[DEU=Vorhandene Telefonnr. formatieren ?;
                             ENU=Format existing Phone No.?];
                  SourceExpr=FormatExistPhonoNo }

      { 1000000003;2;Field  ;
                  CaptionML=[DEU=Vorhandene Fax Nr. formatieren ?;
                             ENU=Format existing Fax No.?];
                  SourceExpr=FormatExistFaxNo }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'DEU=Bearbeitet wird;ENU=Working on';
      Text002@1002 : TextConst 'DEU=Debitor;ENU=Customer';
      Text003@1003 : TextConst 'DEU=Kreditor;ENU=Vendor';
      Text004@1004 : TextConst 'DEU=Kontaktperson;ENU=Contact';
      Text005@1006 : TextConst 'DEU=Interessent;ENU=Company';
      Text006@1016 : TextConst 'DEU=Kontakt;ENU=Contact';
      Text1001@1000000007 : TextConst 'DEU=Telefonnummer %1 existiert schon bei %2 %3.;ENU=Phone No. %1 does already exist in %2 %3.';
      Text1002@1000000006 : TextConst 'DEU=Bei Kontaktperson %1, %2 sind Durchwahl-Nr., Mobil-Telefon-Nummer und/oder private Telefonnr. gleich.;ENU=For Contactperson %1, %2 Direct Phone, Mobile Phone No. and /or Private Phone No. are equal.';
      Text1003@1000000005 : TextConst 'DEU=Bei Interessent %1 sind Telefonnr. und Telefon 2 gleich.;ENU=For prospect %1 Phone No. and Phone 2 are equal.';
      Text1004@1000000004 : TextConst 'DEU=Bei Kontaktperson %1, %2 sind Durchwahl-Nr., Mobil-Telefon-Nummer und/oder private Telefonnr. gleich.;ENU=For Contact %1, %2 Direct Phone, Mobile Phone No. and /or Private Phone No. are equal.';
      Text1005@1000000003 : TextConst 'DEU=Telefonnummer %1 existiert schon bei %2 %3 %4.;ENU=Phone No. %1 does already exist in %2 %3 %4.';
      Text1006@1007 : TextConst 'DEU=Kontaktperson %1, %2: Telefon-Nummer %3 existiert schon bei %4 %5, %6.;ENU=Contactperson %1, %2: Phone No. %3 does already exist for %4 %5, %6.';
      Text1007@1008 : TextConst 'DEU=Interessent %1: Telefon-Nummer %2 existiert schon bei %3 %4.;ENU=Prospect %1: Phone No. %2 does already exist for %3 %4.';
      Text1008@1009 : TextConst 'DEU="%1 %2: %3 %4 existiert schon bei %5 %6. ";ENU=%1 %2: %3 %4 does already exist for %5 %6.';
      Text1009@1010 : TextConst 'DEU=Bei Debitor %1 sind Telefonnr., Telefonnr. 2 und/oder Mobiltelefonnr. gleich.';
      ATPhoneNumber@1113900000 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{8760C1F1-E05B-4764-9D01-6E192C0F3BC1}:'activeTAPI-Telephony'.PhoneNumber";
      Hinw@1014 : Record 56785;
      TelInd@1013 : Record 56781;
      TelIndex@1012 : Record 56781;
      TAPIFu@1005 : Codeunit 56780;
      TAPIFuSi@1108800002 : Codeunit 56782;
      Window@1015 : Dialog;
      PhoneNo@1011 : Text[30];
      LfdNr@1000 : Integer;
      Text1010@1000000000 : TextConst 'DEU=FÅr Benutzer %1 ist keine Telefonie eingerichtet.;ENU=For User %1 there exists no Phone Setup.';
      Text1011@1017 : TextConst 'DEU=Bei Kontakt %1 sind Telefonnr. und Mobil-Telefon-Nummer gleich.;ENU=For Contact %1 Phone No. and Mobile Phone No. are equal.';
      Text1012@1018 : TextConst 'DEU=Kontakt %1: Telefon-Nummer %2 existiert schon bei %3 %4.;ENU=Contact %1: Phone No. %2 does already exist for %3 %4.';
      TAPIEinr@1000000001 : Record 56782;
      FormatExistPhonoNo@1108800000 : Boolean;
      FormatExistFaxNo@1108800001 : Boolean;
      Text1013@1000000008 : TextConst 'DEU=Mit diesem Report (nur Verarbeitung) wird einmalig zu Beginn der Arbeit mit activeTAPI-Navi der Telefon-Index fÅr die Telefonnummern-Schnellsuche gefÅllt. Optional kînnen die vorhandenen Telefon- und Fax-Nummern formatiert werden.;ENU=When starting to work with activeTAPI-Navi you use this report once (processing only) to fill the Phone Index (fÅr Phone No. Quick Search). Existing Phone / Fax Nos can be formatted.';
      HintText@1000000009 : Text[300];

    BEGIN
    {
      AT01.20     25.09.2003  New (second) parameter for Function ConvToPlain
      AT01.20a    13.03.2008  New Connection with Automation objects
      AT2009      06.11.2009  Check double Numbers options; Fill new field "Blocked"
      AT2011      05.04.2011  Option Format existing numbers Phone / Fax
                              Check Min. length fÅr Phoneindex
      AT2013      11.05.2013  Adapted to 2013
      AT2015      02.12.2014  Adapted to 2015, Request Page added
    }
    END.
  }
  RDLDATA
  {
  }
}

OBJECT Report 56781 Update TAPI Lines
{
  OBJECT-PROPERTIES
  {
    Date=11.05.13;
    Time=11:00:00;
    Modified=Yes;
    Version List=AT2013;
  }
  PROPERTIES
  {
    CaptionML=[DEU=TAPI Leitungen aktualisieren;
               ENU=Update TAPI Lines];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  TapiFu.UpdateLines;
                END;

    UseRequestPage=No;
  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TapiFu@1000000000 : Codeunit 56780;

    BEGIN
    {
      AT04.00             New report
                          to be used in the MenuSuite
      AT2013  11.05.2013  To be used in Departments
                          Caption added
                          Adapted to 2013
    }
    END.
  }
  RDLDATA
  {
  }
}

OBJECT Report 56782 Delete TAPI Logfile
{
  OBJECT-PROPERTIES
  {
    Date=11.05.13;
    Time=11:00:00;
    Modified=Yes;
    Version List=AT2013;
  }
  PROPERTIES
  {
    Permissions=TableData 56780=rd;
    CaptionML=[DEU=TAPI Logbuch lîschen;
               ENU=Delete TAPI Logfile];
    ProcessingOnly=Yes;
    OnPostReport=BEGIN
                   COMMIT;
                 END;

  }
  DATASET
  {
    { 5477;    ;DataItem;                    ;
               DataItemTable=Table56780;
               OnAfterGetRecord=BEGIN
                                  DELETE;
                                END;

               ReqFilterFields=Date,User,Direction,External }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {

    BEGIN
    {
      AT2011  05.04.2011  Created
      AT2013  11.05.2013  Adapted to 2013
    }
    END.
  }
  RDLDATA
  {
  }
}

OBJECT Codeunit 56780 TAPI Functions
{
  OBJECT-PROPERTIES
  {
    Date=06.02.15;
    Time=18:00:00;
    Modified=Yes;
    Version List=AO,AT2015;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1003 : TextConst 'DEU=%1 %2: Telefonnummer %3 existiert schon bei %4 %5.;ENU=Phone No. %1 does already exist in %2 %3.';
      Text002@1004 : TextConst 'DEU=Bei Kontakt %1 sind Durchwahl-Nr., Mobil-Telefon-Nummer und/oder private Telefonnr. gleich.;ENU=For Contact %1 Direct Phone, Mobile Phone No. and /or Private Phone No. are equal.';
      Text003@1011 : TextConst 'DEU=Bei Interessent %1 sind Telefonnr. und Telefon 2 gleich.;ENU=For prospect %1 Phone No. and Phone 2 are equal.';
      Text004@1012 : TextConst 'DEU=Bei Kontakt %1, %2 sind Durchwahl-Nr., Mobil-Telefon-Nummer und/oder private Telefonnr. gleich.;ENU=For Contact %1, %2 Direct Phone, Mobile Phone No. and /or Private Phone No. are equal.';
      Text005@1013 : TextConst 'DEU=%1 %2, %3: Telefonnummer %4 existiert schon bei %5 %6, %7.;ENU=Phone No. %1 does already exist in %2 %3 %4.';
      ATTelephony@1033 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{7D58078D-E0FB-4D64-9829-B909B8F6D8F6}:'activeTAPI-Telephony'.Telephony";
      ATEventSource@1113900014 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{206D2787-8575-4750-A727-38FC5DBFA1A3}:'activeTAPI-Telephony'.EventSource";
      ATPhoneNumber@1005 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{8760C1F1-E05B-4764-9D01-6E192C0F3BC1}:'activeTAPI-Telephony'.PhoneNumber";
      ATDevices@1000000008 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{58F30A7B-2AAB-46EC-86C1-D8EF887CD1CB}:'activeTAPI-Telephony'.Devices";
      AppTrace@1113900001 : Automation "{600E23A8-24BF-43EE-BA93-691E0DFFAD1A} 2.0:{1B61767C-91A3-4632-9E92-A8C29C7DA936}:'activeTAPI_NET_Services'.AppTrace";
      ATConfiguration@1113900007 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{1000FBBF-6480-40B4-B257-F077F04F59CF}:'activeTAPI-Telephony'.Configuration";
      ActiveCalls@1113900006 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{233EE8A5-8A5D-40B2-BF4B-8EE5E9A793F7}:'activeTAPI-Telephony'.ActiveCalls";
      WSHShell@1113900011 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      TAPILog@1028 : Record 56780;
      TelIndex@1000 : Record 56781;
      Cust@1015 : Record 18;
      Vend@1014 : Record 23;
      ContAtt@1009 : Record 5050;
      Cont@1113900002 : Record 5050;
      UserSetup@1008 : Record 91;
      TAPIUser@1007 : Record 56783;
      TAPIEinr@1029 : Record 56782;
      TAPILine@1000000014 : Record 56784;
      ContBusRel@1000000017 : Record 5054;
      TempSegmentLine@1000000015 : TEMPORARY Record 5077;
      InteractionTmplSetup@1000000018 : Record 5122;
      ShortShowPage@1113900018 : Page 56781;
      PhoneNoFoundPage@1113900039 : Page 56780;
      PhoneNoNotFoundPage@1113900037 : Page 56786;
      EndOfCallInPage@1113900035 : Page 56788;
      EndOfCallOutPage@1113900033 : Page 56789;
      TAPIFu@1000000004 : Codeunit 56780;
      TAPIFuSI@1000000019 : Codeunit 56782;
      PhoneNo@1002 : Text[30];
      GUIDTemp@1016 : Text[40];
      InID@1018 : Text[30];
      CallerIDName@1023 : Text[50];
      TempText@1027 : Text[30];
      UserInfo1Alt@1000000003 : Text[120];
      PlainNo@1006 : Text[30];
      InputNo@1001 : Text[30];
      LineName@1000000013 : Text[1000];
      RemoteID@1113900000 : Text[30];
      RemoteIDPlain@1113900017 : Text[30];
      StateRoughHex@1113900010 : Text[8];
      p@1022 : Integer;
      ActionIncom@1026 : Integer;
      NoOfCalls@1031 : Integer;
      EntryNo@1034 : Integer;
      TestNo@1000000005 : Integer;
      Text006@1000000006 : TextConst 'DEU=Der Benutzer %1 ist nicht fÅr Telefonie eingerichtet.;ENU=User %1 has no Setup for TAPI Phoning.';
      Text007@1000000007 : TextConst 'DEU=Der Benutzer %1 ist nur fÅr Pflege Telefon-Index eingerichtet, nicht fÅr Telefonie generell.;ENU=User %1 is only allowed to update the Phone Index, not to use TAPI Phoning in general.';
      Text008@1010 : TextConst 'DEU=Bei Kontakt %1 sind Telefonnr. und Mobil-Telefon-Nummer gleich.;ENU=For Contact %1 Phone No. and Mobile Phone No. are equal.';
      Text009@1021 : TextConst 'DEU=%1 %2: Telefonnummer %3 existiert schon bei %4 %5.;ENU=%1 %2: Phone No. %3 does already exist in %4 %5.';
      LineEntryNo@1000000011 : Integer;
      i@1000000010 : Integer;
      MaxAnz@1000000009 : Integer;
      StatRough@1113900003 : Integer;
      StateRoughInt@1113900008 : Integer;
      Outgoing@1113900004 : Boolean;
      TAPILogFound@1000000012 : Boolean;
      Found@1113900005 : Boolean;
      TimeTemp@1113900009 : Time;
      ProgrRun@1113900012 : Text[180];
      Opt@1113900013 : Text[30];

    PROCEDURE PhoneIndexCust@3(Cust@1000 : Record 18);
    BEGIN
      // AT01.20 BEGIN
      TAPIEinr.GET;
      TAPIEinr.TESTFIELD("Min. length fÅr Phoneindex");
      // AT01.20 END

      // AT2009 INSERTED
      IF TAPIEinr."Check of double numbers" = TAPIEinr."Check of double numbers"::never THEN BEGIN
      END ELSE BEGIN
      // AT2009 END

      // Check for Double for Phone No. in the same table
      // Dubletten-PrÅfung fÅr Telefonnr. in gleicher Tabelle
        IF Cust."Phone No." <> '' THEN BEGIN
          PhoneNo := ConvToPlain(Cust."Phone No.",FALSE);
          TelIndex.RESET;
          TelIndex.SETCURRENTKEY("Phone No.");
          TelIndex.SETRANGE("Phone No.",PhoneNo);
          TelIndex.SETRANGE("Table of origin", 18);
          TelIndex.SETFILTER("No. of origin", '<>%1',Cust."No.");
      // AT2009 INSERTED
          IF TAPIEinr."Check of double numbers" = TAPIEinr."Check of double numbers"::"only unblocked numbers" THEN
            TelIndex.SETRANGE(Blocked, FALSE);
      // AT2009 END
          IF TelIndex.FIND('-') THEN
            MESSAGE(Text001, Cust.TABLECAPTION, Cust."No.", Cust."Phone No.",
              Cust.TABLECAPTION, TelIndex."No. of origin");
        END;

      // AT2009 INSERTED
      END;
      // AT2009 END

      TelIndex.RESET;
      TelIndex.SETRANGE("Table of origin", 18);
      TelIndex.SETRANGE("No. of origin", Cust."No.");
      IF TelIndex.FIND('-') THEN
        TelIndex.DELETEALL;
      TelIndex.RESET;

      // AT01.20 CHANGED
      IF (Cust."Phone No." <> '') AND
         (STRLEN(ConvToNumber(Cust."Phone No.")) >= TAPIEinr."Min. length fÅr Phoneindex") THEN BEGIN
        TelIndex.INIT;
        TelIndex."Table of origin"   := 18;
        TelIndex."No. of origin"     := Cust."No.";
        TelIndex."No. 2 of origin"   := '';
        TelIndex."Type of origin"    := TelIndex."Type of origin"::business;
        TelIndex."Name of origin"    := Cust.Name;
        TelIndex."Phone No."         := ConvToPlain(Cust."Phone No.",FALSE);
      // AT2009 INSERTED
        IF Cust.Blocked = Cust.Blocked::All THEN
          TelIndex.Blocked           := TRUE
        ELSE
          TelIndex.Blocked           := FALSE;
      // AT 2009 END
        TelIndex.INSERT;
      END;
    END;

    PROCEDURE PhoneIndexVend@4(Vend@1000 : Record 23);
    BEGIN
      // AT01.20 BEGIN
      TAPIEinr.GET;
      TAPIEinr.TESTFIELD("Min. length fÅr Phoneindex");
      // AT01.20 END

      // AT2009 INSERTED
      IF TAPIEinr."Check of double numbers" = TAPIEinr."Check of double numbers"::never THEN BEGIN
      END ELSE BEGIN
      // AT2009 END

      // Check for Double for Phone No. in the same table
      // Dubletten-PrÅfung fÅr Telefonnr. in gleicher Tabelle
        IF Vend."Phone No." <> '' THEN BEGIN
          PhoneNo := ConvToPlain(Vend."Phone No.",FALSE);
          TelIndex.RESET;
          TelIndex.SETCURRENTKEY("Phone No.");
          TelIndex.SETRANGE("Phone No.",PhoneNo);
          TelIndex.SETRANGE("Table of origin", 23);
          TelIndex.SETFILTER("No. of origin", '<>%1',Vend."No.");
      // AT2009 INSERTED
          IF TAPIEinr."Check of double numbers" = TAPIEinr."Check of double numbers"::"only unblocked numbers" THEN
            TelIndex.SETRANGE(Blocked, FALSE);
      // AT2009 END
          IF TelIndex.FIND('-') THEN
            MESSAGE(Text001, Vend.TABLECAPTION, Vend."No.", Vend."Phone No.",
              Vend.TABLECAPTION, TelIndex."No. of origin");
        END;

      // AT2009 INSERTED
      END;
      // AT2009 END

      TelIndex.RESET;
      TelIndex.SETRANGE("Table of origin", 23);
      TelIndex.SETRANGE("No. of origin", Vend."No.");
      IF TelIndex.FIND('-') THEN
        TelIndex.DELETEALL;
      TelIndex.RESET;

      // AT01.20 CHANGED
      IF (Vend."Phone No." <> '') AND
         (STRLEN(ConvToNumber(Vend."Phone No.")) >= TAPIEinr."Min. length fÅr Phoneindex") THEN BEGIN
        TelIndex.INIT;
        TelIndex."Table of origin"    := 23;
        TelIndex."No. of origin"     := Vend."No.";
        TelIndex."No. 2 of origin"   := '';
        TelIndex."Type of origin"    := TelIndex."Type of origin"::business;
        TelIndex."Name of origin"    := Vend.Name;
        TelIndex."Phone No."         := ConvToPlain(Vend."Phone No.",FALSE);
      // AT2009 INSERTED
        IF Vend.Blocked = Vend.Blocked::All THEN
          TelIndex.Blocked           := TRUE
        ELSE
          TelIndex.Blocked           := FALSE;
      // AT 2009 END
        TelIndex.INSERT;
      END;
    END;

    PROCEDURE PhoneIndexContAtt@11(ContAtt@1000 : Record 5050);
    BEGIN
      // AT01.20 BEGIN
      TAPIEinr.GET;
      TAPIEinr.TESTFIELD("Min. length fÅr Phoneindex");
      // AT01.20 END

      // AT2009 INSERTED
      IF TAPIEinr."Check of double numbers" = TAPIEinr."Check of double numbers"::never THEN BEGIN
      END ELSE BEGIN
      // AT2009 END

      // Check for Double for Phone No. in the same table
      // Dubletten-PrÅfung fÅr Telefonnr. in gleicher Tabelle
        IF ContAtt."Phone No." <> '' THEN BEGIN
          IF (ContAtt."Phone No." = ContAtt."Mobile Phone No.") THEN
            MESSAGE(Text008, ContAtt."No.");
          PhoneNo := ConvToPlain(ContAtt."Phone No.",FALSE);
          TelIndex.RESET;
          TelIndex.SETCURRENTKEY("Phone No.");
          TelIndex.SETRANGE("Phone No.",PhoneNo);
          TelIndex.SETRANGE("Table of origin", 5050);
          TelIndex.SETFILTER("No. of origin", '<>%1',ContAtt."No.");
      // AT2009 INSERTED
          IF TAPIEinr."Check of double numbers" = TAPIEinr."Check of double numbers"::"only unblocked numbers" THEN
            TelIndex.SETRANGE(Blocked, FALSE);
      // AT2009 END
          IF TelIndex.FIND('-') THEN
            MESSAGE(Text009, ContAtt.TABLECAPTION, ContAtt."No.",
              ContAtt."Phone No.", ContAtt.TABLECAPTION, TelIndex."No. of origin");
        END;

      // Check for Double for Mobile Phone No. in the same table
      // Dubletten-PrÅfung fÅr Mobiltelefonnr. in der gleichen Tabelle
        IF ContAtt."Mobile Phone No." <> '' THEN BEGIN
          IF (ContAtt."Mobile Phone No." = ContAtt."Phone No.") THEN
            MESSAGE(Text008, ContAtt."No.");
          PhoneNo := ConvToPlain(ContAtt."Mobile Phone No.",FALSE);
          TelIndex.RESET;
          TelIndex.SETCURRENTKEY("Phone No.");
          TelIndex.SETRANGE("Phone No.",PhoneNo);
          TelIndex.SETRANGE("Table of origin", 5050);
          TelIndex.SETFILTER("No. of origin", '<>%1',ContAtt."No.");
      // AT2009 INSERTED
          IF TAPIEinr."Check of double numbers" = TAPIEinr."Check of double numbers"::"only unblocked numbers" THEN
            TelIndex.SETRANGE(Blocked, FALSE);
      // AT2009 END
          IF TelIndex.FIND('-') THEN
            MESSAGE(Text009, ContAtt.TABLECAPTION, ContAtt."No.",
              ContAtt."Mobile Phone No.", ContAtt.TABLECAPTION, TelIndex."No. of origin");
        END;

      // AT2009 INSERTED
      END;
      // AT2009 END

      TelIndex.RESET;
      TelIndex.SETRANGE("Table of origin", 5050);
      TelIndex.SETRANGE("No. of origin", ContAtt."No.");
      IF TelIndex.FIND('-') THEN
        TelIndex.DELETEALL;
      TelIndex.RESET;

      // AT01.20 CHANGED
      IF (ContAtt."Phone No." <> '') AND
         (STRLEN(ConvToNumber(ContAtt."Phone No.")) >= TAPIEinr."Min. length fÅr Phoneindex") THEN BEGIN
        TelIndex.INIT;
        TelIndex."Table of origin"   := 5050;
        TelIndex."No. of origin"     := ContAtt."No.";
        TelIndex."No. 2 of origin"   := '';
        TelIndex."Type of origin"    := TelIndex."Type of origin"::business;
        TelIndex."Name of origin"    := ContAtt.Name;
        TelIndex."Phone No."         := ConvToPlain(ContAtt."Phone No.",FALSE);
        TelIndex.INSERT;
      END;

      // AT01.20 CHANGED
      IF (ContAtt."Mobile Phone No." <> '') AND
         (STRLEN(ConvToNumber(ContAtt."Mobile Phone No.")) >= TAPIEinr."Min. length fÅr Phoneindex") THEN BEGIN
        TelIndex.INIT;
        TelIndex."Table of origin"   := 5050;
        TelIndex."No. of origin"     := ContAtt."No.";
        TelIndex."No. 2 of origin"   := '';
        TelIndex."Type of origin"    := TelIndex."Type of origin"::mobile;
        TelIndex."Name of origin"    := ContAtt.Name;
        TelIndex."Phone No."         := ConvToPlain(ContAtt."Mobile Phone No.",FALSE);
        TelIndex.INSERT;
      END;
    END;

    PROCEDURE ConvToPlain@2(PhoneNo@1000 : Text[30];LeadAccCode@1001 : Boolean) : Text[30];
    BEGIN
      IF PhoneNo = '' THEN
        EXIT('')
      ELSE BEGIN

      IF ISCLEAR(ATPhoneNumber) THEN
        CREATE(ATPhoneNumber,TRUE,TRUE);

      { Leading Access Code:
        FALSE: The Phone Number does not start with a leading access code (outbound or User input)
        TRUE: The Phone Number can start with a leading access code, depending on telephone device.
        Refer to activeTAPI.cfg, leading access code value: It depends on the behavior of your telephone (system)
      }
        IF NOT LeadAccCode THEN
          ATPhoneNumber.Initialize(PhoneNo,FALSE)
        ELSE
          ATPhoneNumber.Initialize(PhoneNo);
        PlainNo := ATPhoneNumber.PlainNumber;

        CLEAR(ATPhoneNumber);
        EXIT(PlainNo);
      END;
    END;

    PROCEDURE Dial@5(VerwTab@1000 : Integer;VerwKey1@1001 : Code[20];VerwKey2@1002 : Code[20];VerwArt@1003 : Integer);
    VAR
      LfdNr@1004 : Integer;
    BEGIN
      // Function for create outgoing call: Called from Customer-, Vendor-, Prospect- and Contactperson-Card
      // Funktion zum WÑhlen (ausgehend): Aufgerufen von Debitor-, Kreditor-, Interessenten- und Kontakt-Karte

      TestNo := TAPIFu.TAPIRights;
      IF TestNo < 2 THEN BEGIN
        TAPIFu.TAPINotReadyMessage(TestNo);
        EXIT;
      END;

      // AT2011 CHANGED
      IF ISCLEAR(ATTelephony) THEN
        CREATE(ATTelephony,TRUE,TRUE);
      // AT2011 END

      CASE VerwTab OF
      // Customer / Debitor
        18:
          BEGIN
            IF Cust.GET(VerwKey1) THEN
              IF Cust."Phone No." <> '' THEN
                ATTelephony.MakeCall(Cust."Phone No.");
          END;
      // Vendor / Kreditor
        23:
          BEGIN
            IF Vend.GET(VerwKey1) THEN
              IF Vend."Phone No." <> '' THEN
                ATTelephony.MakeCall(Vend."Phone No.");
          END;
      // Kontakt / Contact
        5050:
          BEGIN
            IF ContAtt.GET(VerwKey1) THEN BEGIN
              CASE VerwArt OF
                // Phone No. / Telefonnr.
                0: BEGIN
                     IF ContAtt."Phone No." <> '' THEN
                       ATTelephony.MakeCall(ContAtt."Phone No.");
                   END;
                // Mobile Phone No. / Mobile Telefonnr.
                2: BEGIN
                     IF ContAtt."Mobile Phone No." <> '' THEN
                       ATTelephony.MakeCall(ContAtt."Mobile Phone No.");
                   END;
              END;
            END;
          END;
      END;

      CLEAR(ATTelephony);
    END;

    PROCEDURE PhoneNoFindAgain@7(PhoneNo@1000 : Text[30]);
    BEGIN
      IF TAPIFu.TAPIRights < 2 THEN
        EXIT;

      GUIDTemp := '';
      IF TAPIUser.GET(USERID) THEN
        GUIDTemp := TAPIUser.GUIDTemp;

      TAPILogFound := FALSE;
      IF GUIDTemp <> '' THEN
        IF TAPILog.GET(GUIDTemp) THEN
          TAPILogFound := TRUE;

      InID := ConvToPlain(PhoneNo,FALSE);

      TelIndex.SETRANGE("Phone No.",InID);

      IF TelIndex.FIND('-') THEN BEGIN
        // If necessary update TAPILog / Wenn erforderlich TAPILog aktualisieren
        IF TAPILogFound THEN BEGIN
          // Update UserInfo / UserInfo aktualisieren
          UserInfo1Alt := TAPILog.UserInfo1;
          CallerIDName := TelIndex."Name of origin" ;
          p := STRPOS(UserInfo1Alt,'|');
            UserInfo1Alt := DELCHR(CallerIDName,'<>') +
              COPYSTR(UserInfo1Alt,p,MAXSTRLEN(UserInfo1Alt)- p + 1);
          TAPILog.UserInfo1 := UserInfo1Alt;
          TAPILog."Table of origin" := TelIndex."Table of origin";
          TAPILog."No. of origin" := TelIndex."No. of origin";
          TAPILog."No. 2 of origin" := TelIndex."No. 2 of origin";
          TAPILog."Name of origin" := TelIndex."Name of origin";
          IF TAPILog.Direction = TAPILog.Direction::"in" THEN BEGIN
            TAPILog."Caller ID" := PhoneNo;
            TAPILog."Caller ID Name" := TelIndex."Name of origin";
          END ELSE BEGIN
            TAPILog."Called ID" := PhoneNo;
            TAPILog."Called ID Name" := TelIndex."Name of origin";
          END;
          TAPILog.MODIFY;
        END;

        // Incoming call, Phone No. found in Phone-Index -> Action for incoming call
        // Eingehender Anruf, Telefonnr. gefunden in Telefon-Index -> Aktion bei eingehendem Anruf
        ActionIncom := 0;
        IF TAPIUser."Action for incoming call" > 0 THEN
          ActionIncom := TAPIUser."Action for incoming call"
        ELSE
          ActionIncom := TAPIEinr."Action for incoming call";
        CASE ActionIncom OF
          // Short Show / Kurzanzeige
          1:
            BEGIN
              CLEAR(ShortShowPage);
              ShortShowPage.DefVar(TelIndex."Name of origin",
                               PhoneNo,
                               TelIndex."Table of origin",
                               TelIndex."No. of origin",
                               TelIndex."No. 2 of origin");
              ShortShowPage.RUN;
            END;
          // Show Origin / Herkunft anzeigen
          2:
            BEGIN
              CASE TelIndex."Table of origin" OF
                // Customer / Debitor
                18:
                  BEGIN
                    IF Cust.GET(TelIndex."No. of origin") THEN
      // AT2013 CHANGED
                      PAGE.RUN(21,Cust,Cust.Name);
                  END;
                // Vendor / Kreditor
                23:
                  BEGIN
                    IF Vend.GET(TelIndex."No. of origin") THEN
      // AT2013 CHANGED
                      PAGE.RUN(26,Vend,Vend.Name);
                  END;
                // Contact / Kontakt)
                5050:
                  BEGIN
                    IF ContAtt.GET(TelIndex."No. of origin") THEN
      // AT2013 CHANGED
                      PAGE.RUN(5050,ContAtt,ContAtt.Name);
                  END;
              END;
            END;
          // Show Menu Phone No. found / Auswahl Telefonnr. gefunden anzeigen
          3:
            BEGIN
              CLEAR(PhoneNoFoundPage);
              PhoneNoFoundPage.DefVar(TelIndex."Name of origin",
                                  PhoneNo,
                                  TelIndex."Table of origin",
                                  TelIndex."No. of origin",
                                  TelIndex."No. 2 of origin");
              PhoneNoFoundPage.RUN;
            END;
        END;
      END ELSE BEGIN
        // Incoming call, Phone No. not found in Phone-Index -> alternatively open Contact-Card
        //   (only if not internal)
        // Eingehender Anruf, Telefonnr. nicht gefunden in Telefon-Index -> wahlweise Kontakt-Karte îffnen
        //   (nur wenn kein interner Anruf)
        IF STRLEN(InID) > TAPIEinr."Length of internal phone No." THEN BEGIN
          CASE TAPIUser."Action for new ext. Phone No." OF
            // Show Contact Card / Interessenten-Karte anzeigen
            1:
              BEGIN
      // AT2013 CHANGED
                PAGE.RUN(5001);
              END;
            // Show Menu Phone No. not found / Auswahl Telefonnr. nicht gefunden anzeigen
            2: BEGIN
                 CLEAR(PhoneNoNotFoundPage);
                 PhoneNoNotFoundPage.DefVar(PhoneNo);
                 PhoneNoNotFoundPage.RUN;
               END;
          END;
        END;
      END;
    END;

    PROCEDURE TAPIRights@1000000002() : Integer;
    BEGIN
      // On every Navision PC activeTAPI-Navi must be installed
      // Auf jedem Navision PC mu· activeTAPI-Navi installiert sein

      // Test User Setup for TAPI-Phoning / Test Benutzer Einrichtung fÅr Telephonie
      // 0: No valid PC Setup and no valid User Setup -> No Phone Functions
      //    keine gÅltige PC und Benutzer-Einrichtung -> Keine Telefonie-Funktionen
      // 2: Only valid User Setup -> Line from User
      //    Nur gÅltige Benutzer Einrichtung -> Leitung vom Benutzer

      TAPIEinr.GET;
      TestNo := 0;

      // Test for User / Test fÅr Benutzer
      IF UserSetup.GET(USERID) THEN BEGIN
        IF UserSetup."Use activeTAPI" THEN BEGIN
          IF TAPIUser.GET(USERID) THEN BEGIN
            IF (NOT TAPIUser.Blocked) THEN BEGIN
              IF TAPIUser."TAPI line name" <> '' THEN
                TestNo := TestNo + 2
              ELSE
                IF TAPIEinr."TAPI line name" <> '' THEN
                  TestNo := TestNo + 2;
            END;
          END;
        END;
      END;

      EXIT(TestNo);
    END;

    PROCEDURE TAPILineReady@1000000000(No@1000000000 : Integer) : Text[50];
    BEGIN
      // No = 2: Take line from User
      // No = 2: Leitung des Benutzers zurÅckgeben

      TAPIEinr.GET;
      CASE No OF
        // Line of the user / Leitung des Benutzers
        2: BEGIN
             TAPIUser.INIT;
             IF TAPIUser.GET(USERID) THEN ;
             IF TAPIUser."TAPI line name" = '' THEN
               EXIT('__' + TAPIEinr."TAPI line name")
             ELSE
               EXIT('__' + TAPIUser."TAPI line name");
           END;
      END;
    END;

    PROCEDURE TAPINotReadyMessage@1000000001(No@1000000000 : Integer);
    BEGIN
      CASE No OF
        0: MESSAGE(Text006,USERID);
      END;
    END;

    PROCEDURE DeletePhoneIndex@12(VerwTab@1003 : Integer;VerwKey1@1002 : Code[20];VerwKey2@1001 : Code[20];VerwArt@1000 : Integer);
    VAR
      PhoneIndex@1004 : Record 56781;
    BEGIN
      // Function for deleting phone index: Called from Customer-, Vendor-, Prospect- and Contactperson-Table (OnDelete)
      // Funktion zum lîschen des Tel.-Index: Aufgerufen von Debitor-, Kreditor-, Interessenten- und Kontakt-Tabelle (OnDelete)

      IF (VerwTab <> 0) AND (VerwKey1 <> '') THEN BEGIN
        PhoneIndex.SETRANGE("Table of origin",VerwTab);
        PhoneIndex.SETRANGE("No. of origin",VerwKey1);
        PhoneIndex.DELETEALL;
      //  AT04.00 ERROR CORRECTION: Deleted
      //  PhoneIndex.MODIFY;
      END;
    END;

    PROCEDURE ConvToNumber@9(PhoneNo@1000 : Text[30]) : Text[30];
    BEGIN
      // AT01.20 NEW
      IF PhoneNo = '' THEN
        EXIT('')
      ELSE BEGIN
        CREATE(ATPhoneNumber,TRUE,TRUE);
        ATPhoneNumber.Initialize(PhoneNo);
        InputNo := ATPhoneNumber.SubscriberNumber;
        CLEAR(ATPhoneNumber);
      // AT04.00.02 NEW
        CLEAR(ATPhoneNumber);
      // AT04.00.02 END
        EXIT(InputNo);
      END;
    END;

    PROCEDURE UpdateLines@1000000003();
    VAR
      Text001@1000000008 : TextConst 'DEU=Es wurde(n) %1 Leitung(en) aktualisiert.;ENU=%1 line(s) were updated.';
    BEGIN
      TAPILine.RESET;
      TAPILine.DELETEALL;
      LineEntryNo := 0;

      // AT2015 CHANGED
      IF ISCLEAR(ATTelephony) THEN BEGIN
        CREATE(ATTelephony,TRUE,TRUE);
        ATTelephony.Initialize('NAV Client');
      END;
      // AT2015 END

      ATDevices := ATTelephony.Devices;
      MaxAnz := ATDevices.Count;
      FOR i := 1 TO MaxAnz DO BEGIN
        LineEntryNo := LineEntryNo + 1;
        TAPILine.INIT;
        TAPILine."Entry No." := LineEntryNo;
        LineName := ATDevices.ItemByIndex(i).Name;
        TAPILine."TAPI Line name" := COPYSTR(DELCHR(LineName,'<'),1,50);
        TAPILine.INSERT;
      END;

      // AT2015 INSERTED
      IF NOT ISCLEAR(ATTelephony) THEN BEGIN
        ATTelephony.Terminate;
        CLEAR(ATTelephony);
      END;
      // AT2105 ENDE

      MESSAGE(Text001,MaxAnz);
    END;

    PROCEDURE DialNo@1000000004(PhoneNo@1000000000 : Text[30]);
    BEGIN
      // Function for create outgoing call by Number: Called from Page 56789 End of Call out
      //                                              and Page 56784 TAPI Logs
      // Funktion zum WÑhlen (ausgehend) einer Nummer: Aufgerufen von Page 56789 Abschlu· Telefonat ausgehend
      //                                              und Page 56784 TAPI Protokolle

      IF PhoneNo = '' THEN
        EXIT;

      TestNo := TAPIFu.TAPIRights;
      IF TestNo < 2 THEN BEGIN
        TAPIFu.TAPINotReadyMessage(TestNo);
        EXIT;
      END;

      // AT2011 CHANGED
      IF ISCLEAR(ATTelephony) THEN
        CREATE(ATTelephony,TRUE,TRUE);
      // AT2011 END

      ATTelephony.MakeCall(PhoneNo);

      CLEAR(ATTelephony);
    END;

    PROCEDURE CreateInteractLogEntry@1000000005(NewGUID@1000000006 : Text[40];NewFound@1000000005 : Boolean;NewName@1000000004 : Text[50];NewPhoneNo@1000000003 : Text[30];NewOriginTab@1000000002 : Integer;NewOriginKey1@1000000001 : Code[20];NewOriginKey2@1000000000 : Code[20];Conn@1000000007 : Boolean);
    BEGIN
      // AT2009 INSERTED
      CASE NewOriginTab OF
        // 18
        DATABASE::Customer:
          BEGIN
            ContBusRel.RESET;
            ContBusRel.SETCURRENTKEY("Link to Table","No.");
            ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
            ContBusRel.SETRANGE("No.",NewOriginKey1);
            IF ContBusRel.FIND('-') THEN
              Cont.GET(ContBusRel."Contact No.")
            ELSE
              EXIT;
          END;
        // 23
        DATABASE::Vendor:
          BEGIN
            ContBusRel.RESET;
            ContBusRel.SETCURRENTKEY("Link to Table","No.");
            ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
            ContBusRel.SETRANGE("No.",NewOriginKey1);
            IF ContBusRel.FIND('-') THEN
              Cont.GET(ContBusRel."Contact No.")
            ELSE
              EXIT;
          END;
        // 5050
        DATABASE::Contact:
          Cont.GET(NewOriginKey1);
      END;

      IF Cont."No." = '' THEN
        EXIT;

      COMMIT;

      InteractionTmplSetup.GET;
      InteractionTmplSetup.TESTFIELD(InteractionTmplSetup."Outg. Calls");

      CLEAR(TempSegmentLine);
      TempSegmentLine.INIT;

      IF Cont.Type = Cont.Type::Person THEN
        TempSegmentLine.SETRANGE("Contact No.",Cont."No.")
      ELSE
        TempSegmentLine.SETRANGE("Contact Company No.",Cont."Company No.");
      NewPhoneNo := TAPIFuSI.ConvToCanonic(NewPhoneNo);
      IF NewPhoneNo <> '' THEN
        TempSegmentLine."Contact Via" := NewPhoneNo;
      TempSegmentLine.VALIDATE("Contact No.",Cont."No.");
      TempSegmentLine."Contact Name" := Cont.Name;
      IF TempSegmentLine."Contact Name" = '' THEN
        TempSegmentLine."Contact Name" := NewName;
      TempSegmentLine.VALIDATE(Date,TODAY);
      // TempSegmentLine."Mail GUID" := NewGUID;

      TempSegmentLine."Wizard Step" := TempSegmentLine."Wizard Step"::"2";
      TempSegmentLine."Time of Interaction" := TIME;
      IF Conn THEN BEGIN
        TempSegmentLine."Interaction Successful" := TRUE;
        TempSegmentLine."Attempt Failed" := FALSE;
      END ELSE BEGIN
        TempSegmentLine."Interaction Successful" := FALSE;
        TempSegmentLine."Attempt Failed" := TRUE;
      END;
      TempSegmentLine."Dial Contact" := FALSE;
      TempSegmentLine.Description := 'Telefonat activeTAPI';
      TempSegmentLine.INSERT;

      TempSegmentLine.VALIDATE("Interaction Template Code",InteractionTmplSetup."Outg. Calls");

      // AT2013 CHANGED
      PAGE.RUNMODAL(PAGE::"Make Phone Call",TempSegmentLine,TempSegmentLine."Contact Via");

      CLEAR(TempSegmentLine);
      // AT2009 END
    END;

    PROCEDURE HandleCallNew@1113900003(CurrentCall@1113900000 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{88C48794-8E10-434C-8617-60D0817AB5D9}:'activeTAPI-Telephony'.ActiveCall");
    BEGIN
      // AT2011 START
      {
      IF ISCLEAR(AppTrace) THEN
        CREATE(AppTrace,TRUE,TRUE);
      }

      IF ISCLEAR(ATTelephony) THEN
        CREATE(ATTelephony, TRUE, TRUE);
      // AT2011 END

      // No action for function falls (First character = *)
      // Anlagen-Steuerbefehle keine Aktion (1. Stelle = *)
      // AT01.20 CHANGED: ForeignID -> RemoteID

      RemoteID := DELCHR(CurrentCall.RemoteID,'<>');
      IF STRLEN(RemoteID) > 0 THEN
        IF COPYSTR(RemoteID,1,1) = '*' THEN
          EXIT;

      ActiveCalls := ATTelephony.ActiveCalls;
      NoOfCalls := ActiveCalls.Count;
      IF NoOfCalls > 0 THEN
        CurrentCall.UserInfo2 := FORMAT(NoOfCalls);

      // AT2011 BEGIN
      // AppTrace.InfoMessage('Call New: Local ID : ' + DELCHR(CurrentCall.LocalID),'<>'));
      // AppTrace.InfoMessage('Call New: Remote ID: ' + DELCHR(CurrentCall.RemoteID),'<>'));
      // AppTrace.InfoMessage('Call New: Called ID: ' + DELCHR(CurrentCall.CalledID),'<>'));
      // AppTrace.InfoMessage('Call New: Caller ID: ' + DELCHR(CurrentCall.CallerID),'<>'));
      // AT2011 END

      // AT2011 START
      CLEAR(ATTelephony);
      // AT2011 END
    END;

    PROCEDURE HandleCallFinished@1113900001(CurrentCall@1113900000 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{88C48794-8E10-434C-8617-60D0817AB5D9}:'activeTAPI-Telephony'.ActiveCall");
    BEGIN
      // AT01.20 CHANGED: Introduction of RemoteID instead of CallerID/CalledID

      // When call is finished: Log of call / Bei Anrufende in Log schreiben

      Found := FALSE;

      // AT 2011 BEGIN
      // AppTrace.WriteLine('Call Finished: Local ID : ' + DELCHR(CurrentCall.LocalID,'<>'));
      // AppTrace.WriteLine('Call Finished: Remote ID: ' + DELCHR(CurrentCall.RemoteID,'<>'));
      // AppTrace.WriteLine('Call Finished: Called ID: ' + DELCHR(CurrentCall.CalledID,'<>'));
      // AppTrace.WriteLine('Call Finished: Caller ID: ' + DELCHR(CurrentCall.CallerID,'<>'));
      // AT 2011 END

      // No logging for Function Calls (First character = *) / Anlagen-Steuerbefehle nicht loggen (1. Stelle = *)
      RemoteID := DELCHR(CurrentCall.RemoteID,'<>');

      IF STRLEN(RemoteID) > 0 THEN
        IF COPYSTR(RemoteID,1,1) = '*' THEN
          EXIT;

      // No logging for only status Idle (State rough = 1)
      StatRough := CurrentCall.States;
      IF StatRough = 1 THEN
        EXIT;

      // AT2011 INSERT BEGIN
      TAPIEinr.GET;
      IF (STRLEN(RemoteID) <= TAPIEinr."Length of internal phone No.") AND
         (NOT TAPIEinr."Log internal calls") THEN BEGIN
      END ELSE BEGIN
      // AT2011 INSERT END

        TAPILog.RESET;
        TAPILog.SETCURRENTKEY("Entry No.");
        IF TAPILog.FIND('+') THEN
          EntryNo := TAPILog."Entry No."
        ELSE
          EntryNo := 0;

        TAPILog.RESET;
        TAPILog.INIT;
        TAPILog."Key local" := CurrentCall.GUID;
        TAPILog.INSERT;

        EntryNo := EntryNo + 1;
        TAPILog."Entry No." := EntryNo;
        TAPILog.Date := CurrentCall.CallDate;

        // Time als String
        TempText := FORMAT(CurrentCall.CallTimeS);
        IF EVALUATE(TimeTemp,TempText) THEN ;
        TAPILog.Time := TimeTemp;

        TAPILog.User := USERID;
        TAPILog."Duration (Sec.)" := CurrentCall.TimerB;
        StateRoughInt := CurrentCall.States;
      //  StateRoughHex := ATProxyServiceFunctions.DezHex(StateRoughInt);
      //  TAPILog."State (rough)" := StateRoughHex;
        IF CurrentCall.WasConnected THEN
          TAPILog.State := TAPILog.State::connected
        ELSE
          TAPILog.State := TAPILog.State::"not connected";
        TAPILog."Caller ID" := CurrentCall.CallerID;
        TAPILog."Caller ID Name" := CurrentCall.CallerIDName;
        TAPILog."Called ID" := CurrentCall.CalledID;
        TAPILog."Called ID Name" := CurrentCall.CalledIDName;
        IF STRLEN(RemoteID) > TAPIEinr."Length of internal phone No." THEN
          TAPILog.External := TRUE
        ELSE
          TAPILog.External := FALSE;
        TAPILog."Connected ID" := CurrentCall.ConnectedID;
        TAPILog."Connected ID Name" := CurrentCall.ConnectedIDName;
        TAPILog."Redirection ID" := CurrentCall.RedirectionID;
        TAPILog."Redirection ID Name" := CurrentCall.RedirectionIDName;
        TAPILog."Redirecting ID" := CurrentCall.RedirectingID;
        TAPILog."Redirecting ID Name" := CurrentCall.RedirectingIDName;
        TAPILog."Key global" := CurrentCall.CallData;
        TelIndex.RESET;
        TelIndex.SETCURRENTKEY("Phone No.");
        IF CurrentCall.IsInbound THEN
          TAPILog.Direction := TAPILog.Direction::"in"
        ELSE
          TAPILog.Direction := TAPILog.Direction::out;

        TAPILog."Remote ID" := RemoteID;
        TAPILog."Local ID" := CurrentCall.LocalID;
        TAPILog."Local ID Name" := CurrentCall.LocalIDName;

        IF RemoteID <> '' THEN BEGIN
          RemoteIDPlain := TAPIFu.ConvToPlain(RemoteID,TRUE);
          TelIndex.SETRANGE("Phone No.",RemoteIDPlain);
          IF TelIndex.FIND('-') THEN BEGIN
            TAPILog."Remote ID Name" := TelIndex."Name of origin";
            TAPILog."Table of origin" := TelIndex."Table of origin";
            TAPILog."No. of origin" := TelIndex."No. of origin";
            TAPILog."No. 2 of origin" := TelIndex."No. 2 of origin";
            TAPILog."Name of origin" := TelIndex."Name of origin";
            Found := TRUE;
          END;
        END;

        TAPILog.Origin := CurrentCall.Origin;

        TAPILog.MODIFY;

      // AppTrace.InfoMessage('TAPI Log geschrieben');

      // AT2011 INSERT BEGIN
      END;
      // AT2011 INSERT END

      // AT2009 INSERTED
      TAPIUser.INIT;
      IF TAPIUser.GET(USERID) THEN ;
      // AT2009 END

      // Page for End of Call
      // Page fÅr Ende des Telefonats

      // Incoming
      IF CurrentCall.IsInbound THEN BEGIN
      // AT2009 INSERTED
        IF TAPIUser."Action for end of incom. call" = TAPIUser."Action for end of incom. call"::none THEN BEGIN
        END ELSE BEGIN
      // AT2009 END
      // AT2013 CHANGED
          CLEAR(EndOfCallInPage);
          IF Found THEN BEGIN
            EndOfCallInPage.DefVar(TAPILog."Key local", TRUE, TAPILog."Remote ID Name",RemoteID,
              TAPILog."Table of origin", TAPILog."No. of origin", TAPILog."No. 2 of origin");
            EndOfCallInPage.RUN;
          END ELSE BEGIN
            EndOfCallInPage.DefVar(TAPILog."Key local", FALSE, '',RemoteID, 0, '', '');
            EndOfCallInPage.RUN;
          END;
      // AT2012 END
        END;

      // Outgoing
      END ELSE BEGIN
      // AT2009 INSERTED
        IF TAPIUser."Action for end of outgo. call" = TAPIUser."Action for end of outgo. call"::none THEN BEGIN
        END ELSE BEGIN
      // AT2009 END
      // AT2013 CHANGED
          CLEAR(EndOfCallOutPage);
          IF Found THEN BEGIN

      // AppTrace.InfoMessage('Outgoing, Nummer gefunden, Page');

            EndOfCallOutPage.DefVar(TAPILog."Key local", TRUE, TAPILog."Remote ID Name",RemoteID,
              TAPILog."Table of origin", TAPILog."No. of origin", TAPILog."No. 2 of origin");
            EndOfCallOutPage.RUN;

      // AppTrace.InfoMessage('Outgoing, Nummer gefunden, nach Page End of Call');

          END ELSE BEGIN

      // AppTrace.InfoMessage('Outgoing, Nummer nicht gefunden, Page');

            EndOfCallOutPage.DefVar(TAPILog."Key local", FALSE, '',RemoteID, 0, '', '');
            EndOfCallOutPage.RUN;

      // AppTrace.InfoMessage('Outgoing, Nummer nicht gefunden, nach Page End of Call');

          END;
      // AT2013 ENDE
        END;
      END;
    END;

    PROCEDURE HandleLineMessage@1113900002(CurrentCall@1113900000 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{88C48794-8E10-434C-8617-60D0817AB5D9}:'activeTAPI-Telephony'.ActiveCall");
    BEGIN
    END;

    PROCEDURE HandleCallUserInfo@1113900000(CurrentCall@1113900000 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{88C48794-8E10-434C-8617-60D0817AB5D9}:'activeTAPI-Telephony'.ActiveCall";UserInfoBits@1113900001 : Integer);
    BEGIN
      // AT01.20 NEW
      // Change of Remote ID (external Partner ID: In = Caller or Connected ID, Out = Called ID)

      IF UserInfoBits = 8192 THEN BEGIN
      // AT2009 BEGIN
        // AppTrace.InfoMessage('Call User Info: Local ID : ' + DELCHR(CurrentCall.LocalID,'<>'));
        // AppTrace.InfoMessage('Call User Info: Remote ID: ' + DELCHR(CurrentCall.RemoteID,'<>'));
        // AppTrace.InfoMessage('Call User Info: Called ID: ' + DELCHR(CurrentCall.CalledID,'<>'));
        // AppTrace.InfoMessage('Call User Info: Caller ID: ' + DELCHR(CurrentCall.CallerID,'<>'));
      // AT2009 END

        RemoteID := DELCHR(CurrentCall.RemoteID,'<>');
        RemoteIDPlain := TAPIFu.ConvToPlain(RemoteID,TRUE);

        // Search for Remote ID in Phone Index; if found write Name into Remote Name
        Found := FALSE;
        IF STRLEN(RemoteID) > 0 THEN BEGIN
          TelIndex.SETRANGE("Phone No.",RemoteIDPlain);
          IF TelIndex.FIND('-') THEN BEGIN
            CurrentCall.RemoteIDName := TelIndex."Name of origin";
            Found := TRUE;
          END;
        END;

        // Actions

        // No action for function falls (First character = *)
        // Anlagen-Steuerbefehle keine Aktion (1. Stelle = *)

        IF STRLEN(RemoteID) > 0 THEN
          IF COPYSTR(RemoteID,1,1) = '*' THEN
            EXIT;

        IF TAPIUser.GET(USERID) THEN BEGIN
          TAPIUser.GUIDTemp := CurrentCall.GUID;
          TAPIUser.MODIFY;
        END;

        IF CurrentCall.Origin = 1 THEN BEGIN
          Outgoing := TRUE;
        END ELSE BEGIN
          Outgoing := FALSE;
        END;

        // In
        IF (NOT Outgoing) THEN BEGIN
          IF Found THEN BEGIN
            // Incoming call, Phone No. found in Phone-Index -> Action for incoming call
            // Eingehender Anruf, Telefonnr. gefunden in Telefon-Index -> Aktion bei eingehendem Anruf

            ActionIncom := 0;
            IF TAPIUser."Action for incoming call" > 0 THEN
              ActionIncom := TAPIUser."Action for incoming call"
            ELSE
              ActionIncom := TAPIEinr."Action for incoming call";
            CASE ActionIncom OF
              // Short Show / Kurzanzeige
              1:
                BEGIN
      // AT2013 CHANGED
                  CLEAR(ShortShowPage);
                  ShortShowPage.DefVar(TelIndex."Name of origin",
                                         RemoteID,
                                         TelIndex."Table of origin",
                                         TelIndex."No. of origin",
                                         TelIndex."No. 2 of origin");
                  ShortShowPage.RUN;
      // AT2013 END
                END;
              // Show Origin / Herkunft anzeigen
              2:
                BEGIN
                  CASE TelIndex."Table of origin" OF
                    // Customer / Debitor
                    18:
                      BEGIN
      // AT2013 CHANGED
                        IF Cust.GET(TelIndex."No. of origin") THEN
                          PAGE.RUN(21,Cust,Cust.Name);
      // AT 2013 ENDE
                      END;
                    // Vendor / Kreditor
                    23:
                      BEGIN
      // AT2013 CHANGED
                        IF Vend.GET(TelIndex."No. of origin") THEN
                          PAGE.RUN(26,Vend,Vend.Name);
      // AT 2013 ENDE
                      END;
                    // Contact / Kontaktperson
                    5050:
                      BEGIN
      // AT2013 CHANGED
                        IF ContAtt.GET(TelIndex."No. of origin") THEN
                          PAGE.RUN(5050,ContAtt,ContAtt.Name);
      // AT2013 ENDE
                      END;
                  END;
                END;
              // Show Menu Phone No. found / Auswahl Telefonnr. gefunden anzeigen
              3:
                BEGIN
      // AT2013 CHANGED
                  CLEAR(PhoneNoFoundPage);
                  PhoneNoFoundPage.DefVar(TelIndex."Name of origin",
                                          RemoteID,
                                          TelIndex."Table of origin",
                                          TelIndex."No. of origin",
                                          TelIndex."No. 2 of origin");
                  PhoneNoFoundPage.RUN;
      // AT2013 ENDE
                END;
            END;
          END ELSE BEGIN
            // Incoming call, Phone No. not found in Phone-Index -> alternatively open Contact-Card
            //   (only if not internal)
            // Eingehender Anruf, Telefonnr. nicht gefunden in Telefon-Index -> wahlweise Kontakt-Karte îffnen
            //   (nur wenn kein interner Anruf)
            IF STRLEN(RemoteID) > TAPIEinr."Length of internal phone No." THEN BEGIN
              CASE TAPIUser."Action for new ext. Phone No." OF
                // Show Contact Card / Interessenten-Karte anzeigen
      // AT2013 CHANGED
                1: PAGE.RUN(5050);
                // Show Menu Phone No. not found / Auswahl Telefonnr. nicht gefunden anzeigen
                2: BEGIN
      // AT2013 BEGIN
                     CLEAR(PhoneNoNotFoundPage);
                     PhoneNoNotFoundPage.DefVar(RemoteID);
                     PhoneNoNotFoundPage.RUN;
                   END;
      // AT2013 END
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE BeginOfTAPI@1113900004();
    BEGIN
      // AT2011 START
      // Start Dialer / Start WÑhlhilfe
      TAPIUser.INIT;
      IF TAPIUser.GET(USERID) THEN BEGIN
        IF (NOT TAPIUser.Blocked) THEN BEGIN
          IF TAPIUser."Start activeTAPI Dialer" THEN BEGIN
            IF TAPIUser."Directory of dialer" <> '' THEN BEGIN
              IF ISCLEAR(WSHShell) THEN
                CREATE(WSHShell, TRUE, TRUE);
              ProgrRun := '"' + TAPIUser."Directory of dialer" + '" /MINIMIZED=1';
              WSHShell.Run(ProgrRun);
      // AT 2015 BEGIN
              IF NOT ISCLEAR(WSHShell) THEN
                CLEAR(WSHShell);
      // AT 2015 END
            END;
          END;
        END;
      END;
      // AT2011 END
    END;

    PROCEDURE EndOfTAPI@1113900005();
    BEGIN
      // AT2011 CHANGED
      // AT01.20 NEW
      // End Dialer / Beenden WÑhlhilfe
      TAPIUser.INIT;
      IF TAPIUser.GET(USERID) THEN BEGIN
        IF TAPIUser."Start activeTAPI Dialer" THEN BEGIN
          IF TAPIUser."Directory of dialer" <> '' THEN BEGIN
            IF ISCLEAR(WSHShell) THEN
              CREATE(WSHShell, TRUE, TRUE);
            ProgrRun := '"' + TAPIUser."Directory of dialer" + '" /EXIT';
            WSHShell.Run(ProgrRun);
      // AT 2015 BEGIN
            IF NOT ISCLEAR(WSHShell) THEN
              CLEAR(WSHShell);
      // AT 2015 END
          END;
        END;
      END;
      // AT2011 CHANGED END

      // AT 2015 BEGIN
      IF NOT ISCLEAR(ATPhoneNumber) THEN
        CLEAR(ATPhoneNumber);
      // AT 2015 ENDE
    END;

    EVENT ATEventSource@1113900014::CallNew@1(CurrentCall@1113900000 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{BA7151F3-8ECC-4507-9F7C-1C38E76F0054}:'activeTAPI-Telephony'._ActiveCall");
    BEGIN
    END;

    EVENT ATEventSource@1113900014::CallFinished@2(CurrentCall@1113900000 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{BA7151F3-8ECC-4507-9F7C-1C38E76F0054}:'activeTAPI-Telephony'._ActiveCall");
    BEGIN
    END;

    EVENT ATEventSource@1113900014::lineMessage@3(CurrentCall@1113900005 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{BA7151F3-8ECC-4507-9F7C-1C38E76F0054}:'activeTAPI-Telephony'._ActiveCall";CallHandleOrLineHandle@1113900004 : Integer;message@1113900003 : Integer;param1@1113900002 : Integer;param2@1113900001 : Integer;param3@1113900000 : Integer);
    BEGIN
    END;

    EVENT ATEventSource@1113900014::CallUserInfo@4(CurrentCall@1113900003 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{BA7151F3-8ECC-4507-9F7C-1C38E76F0054}:'activeTAPI-Telephony'._ActiveCall";UserInfoBits@1113900002 : Integer;OldValue@1113900001 : Text[1024];NewValue@1113900000 : Text[1024]);
    BEGIN
    END;

    EVENT ATEventSource@1113900014::WatchDog@5();
    BEGIN
    END;

    BEGIN
    {
      AT01.20       08.09.2003  BugFix: Return Value of Function "TAPILineReady" changed from Text 30
                                        to Text 50 (possibility of Field overflow)
                                Integration of new field in TAPI Setup: "Min. length fÅr Phoneindex"
                                New Function ConvertToNumber: Gives back Input-Number without any
                                  special signs like ./- etc.
                                New Function ConvertToCanonic: Gives back canonic formatted Input-Number;
                                  can be used for Customer/Vendor/Contact-Phone-Numbers, if
                                  "TAPI Setup"."Format Phone Number" ist set to Yes
                                New Function EndOfTAPI for closing actions like closing Dialer
      AT04.00       04.11.2005  New Function Update Lines
                                Error Correction in DeletePhoneIndex: MODIFY after DELETEALL deleted
                                Correction in EndOfTAPI: Error in changing Company (Mandantenwechsel)
                                  was fixed

      AT04.00.02    15.09.2006  Error correction:
                                1) In Functions ConvToCanonic, ConvToPlain, ConvToNumber:
                                   Add ATTelephony Object and Initialize it
                                2) In Functions for PhoneIndex: Even if a user is not a TAPI-User,
                                   the input/changes in Phone-No-Fields should be stored in the
                                   Phone Index

      AT05.00       16.06.2007  Length of all name-fields changed from 30 to 50
      AT05.00.01    13.03.2008  New Connection with Automation objects
      AT2009        06.11.2009  ConvToCanonic transfered to SI-CU 56782
                                New Global Var TAPIFuSI Codeunit 56782
                                Field "Blocked" in Phone Index (Customer / Vendor)
                                Check for double numbers defined in Setup
                                Option: Create Interaction Log Entry
      AT2011        05.04.2011  Changes for RTC: CREATE, ISSERVICETIER (Dialer)
                                Old Code deleted, AppTrace
                                Transfer from TAPI Main: Handling of Events
                                BeginOfTAPI - called from CU 1
                    08.04.2011  Automation new defined for Handle functions
      AT2011.3      11.10.2011  In TAPILineReady added __ to the TAPI-Drivername
                                Function EndOfTAPI transfered to the end of the function list
      AT2013        11.05.2013  Changes for NAV 2013 (Page)
                                Text "Page" added to all Page-Names
                                ISSERVICETIER deleted
      AT2015        02.12.2014  EndOfTAPI: CLEAR(ATTelephony) transferred to Page 56780
                                CLEAR(WSHShell) (2x)
                    06.02.2015  UpdateLines changed
    }
    END.
  }
}

OBJECT Codeunit 56781 TAPI Main
{
  OBJECT-PROPERTIES
  {
    Date=11.10.11;
    Time=12:00:00;
    Modified=Yes;
    Version List=AO,AT2011.3;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
            TestNo := TAPIFu.TAPIRights;
            IF TestNo < 2 THEN
              EXIT;

            // AT2011.3 refactored / Åberarbeitet

            // Load Tracing

            {
            We use Schmidt e-Services AppTrace to trace some important information
            into an File or UDP or ...
            }
            // AT2011
            IF ISCLEAR(AppTrace) THEN
              CREATE(AppTrace,TRUE,TRUE);
            AppTrace.InfoMessage('Start Trace in CU 56781 TAPI Main');  // Trace a first INFO-Message


            // Load and Initialize Telephony

            {
            The TelephonyService is activeTAPI's services layer to which all
            applications must connect. Connecting to the service performs two
            actions:
            a) It registers Navision's EventHandler-Object (which has to be
               created from Navision before)
            b) It returns the activeTAPI.Telephony object which is THE
               activeTAPI telephony.
            }

            AppTrace.InfoMessage('Initialize ATTelephony');
            // Create EventSender-Object
            IF ISCLEAR(ATEventSource) THEN
              CREATE(ATEventSource,TRUE,TRUE);

            IF ISCLEAR(ATTelephony) THEN
              CREATE(ATTelephony,TRUE,TRUE);

            { Create Telephony.Object, register the event-handler }
            ATTelephony.Initialize('NAV Client', ATEventSource);


            // Configuration of Telephony

            AppTrace.InfoMessage('Configure ATTelephony');

            {
            Overwrite activeTAPI's configuration settings with the values defined in
            Navision's TAPI-Setup.
            }

            TAPIEinr.GET;

            ATConfiguration := ATTelephony.activeTAPI_Configuration;

            // Length of internal Phone No. / LÑnge der internen Rufnummern
            ATConfiguration.LenOfInternal := TAPIEinr."Length of internal phone No.";

            // Create Global key for (redirected) calls /
            // Zentralen SchlÅssel fÅr (weitergeleitete) Telefonate erstellen
            ATConfiguration.AutoSetCallData := TAPIEinr."Create call data";


            // Configuration and Start of Line Device

            // Standard Setup for Phoning / Standard-Einstellung fÅr Telefonie
            LineMediaMode_InteractiveVoice := 4;

            // Standard Setup for Modem Phoning / Standard-Einstellung fÅr Modem-Telefonie
            LineMediaMode_DataModem := 16;

            // Owner Privilegs for selected line / Steuer-Rechte auf der gewÑhlten Leitung
            LineCallPrivilegs_Owner := 4;

            TAPIDriverName := TAPIFu.TAPILineReady(TestNo);

            AppTrace.InfoMessage('Close open lines');
            WHILE ATTelephony.Lines.Count > 0 DO BEGIN
              ATTelephony.LineClose;
            END;

            // Open the Line on which we want to communicate (TAPIDriverName -> LineDeviceName)
            AppTrace.InfoMessage('Line open ' + TAPIDriverName);
            ATTelephony.LineOpen(TAPIDriverName,LineCallPrivilegs_Owner,LineMediaMode_InteractiveVoice);

            // AT2011 Start Dialer for classic client / Start WÑhlhilfe
            TAPIFu.BeginOfTAPI;
          END;

  }
  CODE
  {
    VAR
      ATTelephony@1010 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{7D58078D-E0FB-4D64-9829-B909B8F6D8F6}:'activeTAPI-Telephony'.Telephony";
      ATEventSource@1026 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{206D2787-8575-4750-A727-38FC5DBFA1A3}:'activeTAPI-Telephony'.EventSource" WITHEVENTS;
      ATConfiguration@1054 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{1000FBBF-6480-40B4-B257-F077F04F59CF}:'activeTAPI-Telephony'.Configuration";
      AppTrace@1113900001 : Automation "{600E23A8-24BF-43EE-BA93-691E0DFFAD1A} 2.0:{1B61767C-91A3-4632-9E92-A8C29C7DA936}:'activeTAPI_NET_Services'.AppTrace";
      TAPIEinr@1113900000 : Record 56782;
      TAPIUser@1039 : Record 56783;
      TAPIFu@1015 : Codeunit 56780;
      TAPIDriverName@1025 : Text[50];
      LineCallPrivilegs_Owner@1049 : Integer;
      LineMediaMode_InteractiveVoice@1029 : Integer;
      LineMediaMode_DataModem@1028 : Integer;
      TestNo@1000000000 : Integer;
      Text001@1053 : TextConst 'DEU=Sie mÅssen Name TAPI Leitung bei PC %1 eingeben (TAPI Einrichtung, PC''s und TAPI Leitungen).;ENU=You must input TAPI Line name for PC %1 (TAPI Setup, PC''s and TAPI Lines).';
      Text002@1052 : TextConst 'DEU=Sie mÅssen PC %1 und Name TAPI Leitung anlegen (TAPI Einrichtung, PC''s und TAPI Leitungen).;ENU=You must input PC %1 and TAPI Line name (TAPI Setup, PC''s and TAPI Lines).';

    EVENT ATEventSource@1026::CallNew@1(CurrentCall@1113900000 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{BA7151F3-8ECC-4507-9F7C-1C38E76F0054}:'activeTAPI-Telephony'._ActiveCall");
    BEGIN
      TAPIFu.HandleCallNew(CurrentCall);
    END;

    EVENT ATEventSource@1026::CallFinished@2(CurrentCall@1113900000 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{BA7151F3-8ECC-4507-9F7C-1C38E76F0054}:'activeTAPI-Telephony'._ActiveCall");
    BEGIN
      TAPIFu.HandleCallFinished(CurrentCall);
    END;

    EVENT ATEventSource@1026::lineMessage@3(CurrentCall@1113900005 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{BA7151F3-8ECC-4507-9F7C-1C38E76F0054}:'activeTAPI-Telephony'._ActiveCall";CallHandleOrLineHandle@1113900004 : Integer;message@1113900003 : Integer;param1@1113900002 : Integer;param2@1113900001 : Integer;param3@1113900000 : Integer);
    BEGIN
      TAPIFu.HandleLineMessage(CurrentCall);
    END;

    EVENT ATEventSource@1026::CallUserInfo@4(CurrentCall@1113900003 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{BA7151F3-8ECC-4507-9F7C-1C38E76F0054}:'activeTAPI-Telephony'._ActiveCall";UserInfoBits@1113900002 : Integer;OldValue@1113900001 : Text[1024];NewValue@1113900000 : Text[1024]);
    BEGIN
      TAPIFu.HandleCallUserInfo(CurrentCall, UserInfoBits);
    END;

    EVENT ATEventSource@1026::WatchDog@5();
    BEGIN
    END;

    BEGIN
    {
      AT01.20     08.09.2003  Bugfixes: Proc CallInfoMessage, Show Contact Card
                                          Financials Form 5001, Attain 5050
                                        ISCLEAR-Test for ATTrace
      AT05.00     16.06.2007  Change of "Close all lines if any is open"
                              Length of all name-fields changed form 30 to 50

      AT05.00.01  13.03.2008  New Connection with Automation objects

      AT2009      06.11.2009  Options from TAPI User for Action for end of incom. call, Action for end of outgo. call
                              3 Examples for Tracing (outcommented)

      AT2011      05.04.2011  Var Times deleted (not used any more)
                              Option: Log internal calls
                              Changes for RTC: CREATE, ISSERVICETIER (Dialer), Pages
                              Old code deleted
                              ATTRace changed to AppTrace
                              Events ATEventSource::CallNew, CallFinished, lineMessage, CallUserInfo
                                transferred to CU 56780 TAPI Functions, for use by CC and RTC
                              Start of Dialer transferred to TAPI Functions (BeginOfTAPI);

      AT2011.3    11.10.2011  Structure of OnRun refactored
    }
    END.
  }
}

OBJECT Codeunit 56782 TAPI Functions SI
{
  OBJECT-PROPERTIES
  {
    Date=11.02.15;
    Time=17:00:00;
    Modified=Yes;
    Version List=AO,AT2015;
  }
  PROPERTIES
  {
    SingleInstance=Yes;
    OnRun=BEGIN
            // AT2015 INSERTED
            ATPhoneRunning := FALSE;
            // AT2015 END

            // AT 2015 CHANGED
            IF ISCLEAR(ATTelephony) THEN BEGIN
              IF CREATE(ATTelephony,TRUE,TRUE) THEN BEGIN
                ATTelephony.Initialize('NAV Client');
                IF ISCLEAR(ATPhoneNumber) THEN BEGIN
                  IF CREATE(ATPhoneNumber,TRUE,TRUE) THEN
                    ATPhoneRunning := TRUE;
                END;
              END;
            // AT2015 END
            END;
          END;

  }
  CODE
  {
    VAR
      ATTelephony@1000000001 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{7D58078D-E0FB-4D64-9829-B909B8F6D8F6}:'activeTAPI-Telephony'.Telephony";
      ATPhoneNumber@1000000000 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{8760C1F1-E05B-4764-9D01-6E192C0F3BC1}:'activeTAPI-Telephony'.PhoneNumber";
      ATCountry@1000000003 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{04D52579-095E-4DBC-9444-B87AA4AB73CB}:'activeTAPI-Telephony'.Country";
      CanonicNo@1000000002 : Text[30];
      Text001@1000000004 : TextConst 'DEU=Die Telefonnummer bezieht sich auf Land %1, Region %2.;ENU=The Phone No. belongs to Country %1, Area %2.';
      ATPhoneRunning@1000000005 : Boolean;

    PROCEDURE ConvToCanonic@14(PhoneNo@1000 : Text[30]) : Text[30];
    BEGIN
      // AT2009 BEGIN
      IF PhoneNo = '' THEN
        EXIT('')
      ELSE BEGIN
      // AT2015 INSERTED
        IF ATPhoneRunning THEN BEGIN
      // AT2015 END
          ATPhoneNumber.Initialize(PhoneNo,FALSE);
          CanonicNo := ATPhoneNumber.CanonicNumber;

        { Option START
          If after the input of a Phone Number you want to show to the user the
          country and area of the Phone number you must activate this option;
          Attention: If you have activated Integration of Relationship Management, the message may appear two times:
          f.e.: 1st time from the customer Phone No., 2nd time from the Contact Phone No.
          IF ATPhoneNumber.IsCanonical THEN BEGIN
            ATCountry := ATPhoneNumber.Country;
            MESSAGE(Text001, ATCountry.Name, ATPhoneNumber.AreaName);
          END ELSE BEGIN
            CanonicNo := DELCHR(PhoneNo, '<>') + '|?';
          END;
        Option END}

          EXIT(CanonicNo);
      // AT 2015 INSERTED
        END ELSE
          EXIT(PhoneNo);
      // AT 2015 ENDE
      END;
      // AT2009 END
    END;

    BEGIN
    {
      AT2009      06.11.2009  ConvToCanonic transferred from CU 56780
      AT2011      05.04.2011  Changes for RTC: CREATE
      AT2015      11.02.2015  New Var ATPhoneRunning to avoid RT-Client-Crash, if activeTAPI is not installed (thanks to Heiko)
    }
    END.
  }
}

OBJECT MenuSuite 1055 Dept - Add-on 5
{
  OBJECT-PROPERTIES
  {
    Date=05.04.11;
    Time=19:39:11;
    Modified=Yes;
    Version List=AT2011;
  }
  PROPERTIES
  {
  }
  MENUNODES
  {
    {                ;[{19A352FE-D90D-424E-B85F-CF3B8E98CF0E}] ;NextNodeID=[{C5D52441-34B2-4F6B-BFA1-033C708A958F}] }
    { Menu           ;[{C5D52441-34B2-4F6B-BFA1-033C708A958F}] ;Name=&Telefonie;
                                                                CaptionML=[DEU=Telefonie;
                                                                           ENU=Telephony (CTI)];
                                                                MemberOfMenu=[{C5D52441-34B2-4F6B-BFA1-033C708A958F}];
                                                                ParentNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                Image=0;
                                                                IsShortcut=No;
                                                                Visible=Yes;
                                                                Enabled=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                FirstChild=[{B59D4AE7-378E-41BC-A813-B1FB5ABC4D20}] }
    { MenuGroup      ;[{43954EB0-EC5C-487A-82ED-8851BDD53BFA}] ;Name=Neue Gruppe;
                                                                CaptionML=[DEU=Einrichtung;
                                                                           ENU=Setup];
                                                                MemberOfMenu=[{C5D52441-34B2-4F6B-BFA1-033C708A958F}];
                                                                ParentNodeID=[{C5D52441-34B2-4F6B-BFA1-033C708A958F}];
                                                                Visible=Yes;
                                                                NextNodeID=[{3B897170-A738-47AA-B516-F7F5976D8325}];
                                                                FirstChild=[{365868BA-9B7B-4D0E-88C4-4A721704FBB3}] }
    { MenuGroup      ;[{3B897170-A738-47AA-B516-F7F5976D8325}] ;Name=Neue Gruppe;
                                                                CaptionML=[DEU=Periodische AktivitÑten;
                                                                           ENU=Periodic Activities];
                                                                MemberOfMenu=[{C5D52441-34B2-4F6B-BFA1-033C708A958F}];
                                                                ParentNodeID=[{C5D52441-34B2-4F6B-BFA1-033C708A958F}];
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                FirstChild=[{64383F72-3B58-40F9-AA02-1EDEE62CB9F0}] }
    { MenuItem       ;[{365868BA-9B7B-4D0E-88C4-4A721704FBB3}] ;Name=TAPI Functions;
                                                                CaptionML=[DEU=TAPI Leitungen aktualisieren;
                                                                           ENU=Update TAPI Lines];
                                                                MemberOfMenu=[{C5D52441-34B2-4F6B-BFA1-033C708A958F}];
                                                                RunObjectType=Report;
                                                                RunObjectID=56781;
                                                                ParentNodeID=[{43954EB0-EC5C-487A-82ED-8851BDD53BFA}];
                                                                Visible=Yes;
                                                                NextNodeID=[{C1346C1B-D5FB-4AFC-A534-9BF3A921BC14}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{C1346C1B-D5FB-4AFC-A534-9BF3A921BC14}] ;Name=TAPI Einrichtung;
                                                                CaptionML=[DEU=TAPI Einrichtung;
                                                                           ENU=TAPI Setup Card];
                                                                MemberOfMenu=[{C5D52441-34B2-4F6B-BFA1-033C708A958F}];
                                                                RunObjectType=Page;
                                                                RunObjectID=56782;
                                                                ParentNodeID=[{43954EB0-EC5C-487A-82ED-8851BDD53BFA}];
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                DepartmentCategory=Tasks }
    { MenuItem       ;[{64383F72-3B58-40F9-AA02-1EDEE62CB9F0}] ;Name=Telefon-Index fÅllen;
                                                                CaptionML=[DEU=Telefon-Index fÅllen;
                                                                           ENU=Fill Phone Index];
                                                                MemberOfMenu=[{C5D52441-34B2-4F6B-BFA1-033C708A958F}];
                                                                RunObjectType=Report;
                                                                RunObjectID=56780;
                                                                ParentNodeID=[{3B897170-A738-47AA-B516-F7F5976D8325}];
                                                                Visible=Yes;
                                                                NextNodeID=[{DFB5F22F-5022-454B-A166-3E8CC0864B9E}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{DFB5F22F-5022-454B-A166-3E8CC0864B9E}] ;Name=Hinweise fÅr Telefon-Index;
                                                                CaptionML=[DEU=Hinweise fÅr Telefon-Index;
                                                                           ENU=Notes for Phone-Index];
                                                                MemberOfMenu=[{C5D52441-34B2-4F6B-BFA1-033C708A958F}];
                                                                RunObjectType=Page;
                                                                RunObjectID=56791;
                                                                ParentNodeID=[{3B897170-A738-47AA-B516-F7F5976D8325}];
                                                                Visible=Yes;
                                                                NextNodeID=[{85D6C74E-61F7-4683-802A-B11F05889881}];
                                                                DepartmentCategory=Lists }
    { MenuItem       ;[{85D6C74E-61F7-4683-802A-B11F05889881}] ;Name=Telefon-Index bearbeiten;
                                                                CaptionML=[DEU=Telefon-Index bearbeiten;
                                                                           ENU=Change Phone Index];
                                                                MemberOfMenu=[{C5D52441-34B2-4F6B-BFA1-033C708A958F}];
                                                                RunObjectType=Page;
                                                                RunObjectID=56790;
                                                                ParentNodeID=[{3B897170-A738-47AA-B516-F7F5976D8325}];
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                DepartmentCategory=Lists }
    { MenuItem       ;[{FCFE2485-2318-4034-86F4-4D5D2AD834E3}] ;Name=Delete Orphaned Record Links;
                                                                CaptionML=[DEU=Nicht verbundene DatensatzverknÅpfungen lîschen;
                                                                           ENU=Delete Orphaned Record Links];
                                                                RunObjectType=Codeunit;
                                                                RunObjectID=447;
                                                                Visible=Yes;
                                                                DepartmentCategory=Tasks }
    {                ;[{65E2DFB3-0C1B-4357-AF34-9D8C2F8695BF}] ;NextNodeID=[{404E62A3-BD1E-4CEA-A90D-D9D6A91F2229}] }
    { MenuItem       ;[{404E62A3-BD1E-4CEA-A90D-D9D6A91F2229}] ;Name=Item Tracking Appendix;
                                                                CaptionML=[DEU=Anhang Artikelverfolgung;
                                                                           ENU=Item Tracking Appendix];
                                                                RunObjectType=Report;
                                                                RunObjectID=6521;
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuGroup      ;[{637F7895-E36D-4539-B9C5-5D5630AC0926}] ;Name=Sales Documents;
                                                                CaptionML=[DEU=Verkaufsbelege;
                                                                           ENU=Sales Documents];
                                                                Visible=Yes }
    { MenuItem       ;[{A8CF00DC-84CF-46D2-893C-BD13C05D34D9}] ;Name=Delete Invoiced Sales Orders..;
                                                                CaptionML=[DEU=Erledigte AuftrÑge lîschen...;
                                                                           ENU=Delete Invoiced Sales Orders...];
                                                                RunObjectType=Report;
                                                                RunObjectID=299;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{C1900F88-45F1-43C5-BD95-EAA296160054}] ;Name=[Delete Invoiced Blanket Sales ];
                                                                CaptionML=[DEU=Erledigte RahmenauftrÑge lîschen...;
                                                                           ENU=Delete Invoiced Blanket Sales Orders...];
                                                                RunObjectType=Report;
                                                                RunObjectID=291;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{BB909E91-17F7-463F-B941-81B4E2D1EA5E}] ;Name=Delete Invoiced Sales Return O;
                                                                CaptionML=[DEU=Erledigte Verkaufsreklamationen lîschen...;
                                                                           ENU=Delete Invoiced Sales Return Orders...];
                                                                RunObjectType=Report;
                                                                RunObjectID=6651;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{6FC70FA7-46E0-4F20-9785-01E18322E83A}] ;Name=Delete Archived Sales Quote Ve;
                                                                CaptionML=[DEU=Archivierte Angebotsversionen lîschen...;
                                                                           ENU=Delete Archived Sales Quote Versions...];
                                                                RunObjectType=Report;
                                                                RunObjectID=5179;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{12BC41EE-5F10-4B3D-8808-919A6E294520}] ;Name=Delete Archived Sales Order Ve;
                                                                CaptionML=[DEU=Archivierte Auftragsversionen lîschen...;
                                                                           ENU=Delete Archived Sales Order Versions...];
                                                                RunObjectType=Report;
                                                                RunObjectID=5180;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{E2DCD87D-3909-4B41-9FAB-65CDCC9BAE4D}] ;Name=Report5005130;
                                                                CaptionML=[DEU=Archivierte Rahmenauftragsversionen lîschen...;
                                                                           ENU=Delete Archived Blanket Sales Order Versions...];
                                                                RunObjectType=Report;
                                                                RunObjectID=5005130;
                                                                Visible=Yes;
                                                                NextNodeID=[{A8CF00DC-84CF-46D2-893C-BD13C05D34D9}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuGroup      ;[{1AE7ACCC-E9A2-4BE6-AA07-78AC5AC1811D}] ;Name=Purchase Documents;
                                                                CaptionML=[DEU=Einkaufsbelege;
                                                                           ENU=Purchase Documents];
                                                                Visible=Yes }
    { MenuItem       ;[{5B47520A-746D-43CF-B4E9-DA7CFBC52464}] ;Name=Delete Invoiced Purchase Order;
                                                                CaptionML=[DEU=Erledigte Bestellungen lîschen...;
                                                                           ENU=Delete Invoiced Purchase Orders...];
                                                                RunObjectType=Report;
                                                                RunObjectID=499;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{30AEF09C-E8EC-4893-9088-CDE9079958D0}] ;Name=Delete Invoiced Blanket Purcha;
                                                                CaptionML=[DEU=Erledigte Rahmenbestellungen lîschen...;
                                                                           ENU=Delete Invoiced Blanket Purchase Orders...];
                                                                RunObjectType=Report;
                                                                RunObjectID=491;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{7E6A50F8-ECD3-4729-820B-53F0A0C117B8}] ;Name=Delete Invoiced Purchase Retur;
                                                                CaptionML=[DEU=Erledigte Einkaufsreklamationen lîschen...;
                                                                           ENU=Delete Invoiced Purchase Return Orders...];
                                                                RunObjectType=Report;
                                                                RunObjectID=6661;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{20FFB6ED-B7BF-4F84-A19F-90E3FA9F3E0F}] ;Name=Delete Archived Purchase Quote;
                                                                CaptionML=[DEU=Archivierte Anfragenversionen lîschen...;
                                                                           ENU=Delete Archived Purchase Quote Versions...];
                                                                RunObjectType=Report;
                                                                RunObjectID=5177;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{3EB49C8F-D3ED-4773-A59A-95396FB176C9}] ;Name=Delete Archived Purchase Order;
                                                                CaptionML=[DEU=Archivierte Bestellungsversionen lîschen...;
                                                                           ENU=Delete Archived Purchase Order Versions...];
                                                                RunObjectType=Report;
                                                                RunObjectID=5178;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{9428E54D-913A-4DC0-B9A7-C2FE9E4A3BD7}] ;Name=Delete Archived Blanket Purcha;
                                                                CaptionML=[DEU=Archivierte Rahmenbestellungsversionen lîschen...;
                                                                           ENU=Delete Archived Blanket Purchase Order Versions...];
                                                                RunObjectType=Report;
                                                                RunObjectID=5005230;
                                                                Visible=Yes;
                                                                NextNodeID=[{5B47520A-746D-43CF-B4E9-DA7CFBC52464}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuGroup      ;[{6F0215A8-7693-4EFA-828C-7B42D0E7E34F}] ;Name=New Group;
                                                                CaptionML=[DEU=Logistikbelege;
                                                                           ENU=Warehouse Documents];
                                                                Visible=Yes }
    { MenuItem       ;[{4B1110CF-F1EF-4164-95C8-A4A03F9809A1}] ;Name=Delete Registered Whse. Docs.;
                                                                CaptionML=[DEU=Registrierte Logistikbelege lîschen...;
                                                                           ENU=Delete Registered Whse. Docs.];
                                                                RunObjectType=Report;
                                                                RunObjectID=5755;
                                                                Visible=Yes;
                                                                NextNodeID=[{4B1110CF-F1EF-4164-95C8-A4A03F9809A1}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuGroup      ;[{E73A0F07-17E7-4051-94AB-16FE1C34E8F6}] ;Name=Date Compression;
                                                                CaptionML=[DEU=Datumskomprimierung;
                                                                           ENU=Date Compression];
                                                                Visible=Yes }
    { MenuItem       ;[{E22EE535-AB97-444F-B411-23F7347D50C0}] ;Name=General Ledger...;
                                                                CaptionML=[DEU=Sachposten...;
                                                                           ENU=G/L Entries...];
                                                                RunObjectType=Report;
                                                                RunObjectID=98;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{016E6289-F48C-4FC3-A111-26DCD3AEC86D}] ;Name=VAT Entries...;
                                                                CaptionML=[DEU=MwSt.-Posten...;
                                                                           ENU=VAT Entries...];
                                                                RunObjectType=Report;
                                                                RunObjectID=95;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{F79DC932-95BB-43AD-9E32-B9E3AD29C139}] ;Name=Bank Account Ledger..;
                                                                CaptionML=[DEU=Bankposten...;
                                                                           ENU=Bank Account Ledger Entries...];
                                                                RunObjectType=Report;
                                                                RunObjectID=1498;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{6E234D06-0F99-4BC1-A2EA-55BB5AA54C3F}] ;Name=G/L Budget Entries;
                                                                CaptionML=[DEU=Finanzbudgetposten...;
                                                                           ENU=G/L Budget Entries...];
                                                                RunObjectType=Report;
                                                                RunObjectID=97;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{CBCA95D5-0BA8-44CD-A900-06FC6B601A83}] ;Name=Customer Ledger Entries...;
                                                                CaptionML=[DEU=Debitorenposten...;
                                                                           ENU=Customer Ledger Entries...];
                                                                RunObjectType=Report;
                                                                RunObjectID=198;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{E9F413C8-17F2-4A38-8865-9B2A687C36DC}] ;Name=Vendor Ledger Entries...;
                                                                CaptionML=[DEU=Kreditorenposten...;
                                                                           ENU=Vendor Ledger Entries...];
                                                                RunObjectType=Report;
                                                                RunObjectID=398;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{6EAF75CF-DC0C-42E3-8E58-C10E1154E1BE}] ;Name=BOM Ledger Entries...;
                                                                CaptionML=[DEU=StÅcklistenposten...;
                                                                           ENU=BOM Ledger Entries...];
                                                                RunObjectType=Report;
                                                                RunObjectID=898;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{592E1717-C332-4C73-A7CF-A5346D5E3283}] ;Name=Resource Ledger Entries...;
                                                                CaptionML=[DEU=Ressourcenposten...;
                                                                           ENU=Resource Ledger Entries...];
                                                                RunObjectType=Report;
                                                                RunObjectID=1198;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{0909EADB-EBAC-45CD-94CF-74283E7DBB1E}] ;Name=FA Ledger Entries...;
                                                                CaptionML=[DEU=Anlagenposten...;
                                                                           ENU=FA Ledger Entries...];
                                                                RunObjectType=Report;
                                                                RunObjectID=5696;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{37DDD71C-F088-4362-A627-E172391FE11B}] ;Name=Maintenance Ledger Entries...;
                                                                CaptionML=[DEU=Wartungsposten...;
                                                                           ENU=Maintenance Ledger Entries...];
                                                                RunObjectType=Report;
                                                                RunObjectID=5698;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{98C8E24B-E34C-41F4-A66A-CCB9986AEF56}] ;Name=Insurance Ledger Entries...;
                                                                CaptionML=[DEU=Versicherungsposten...;
                                                                           ENU=Insurance Ledger Entries...];
                                                                RunObjectType=Report;
                                                                RunObjectID=5697;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{34F1BB2D-D51E-4B5B-A6E2-5D2F7C4531D1}] ;Name=Warehouse Entries...;
                                                                CaptionML=[DEU=Lagerplatzposten...;
                                                                           ENU=Warehouse Entries...];
                                                                RunObjectType=Report;
                                                                RunObjectID=7398;
                                                                Visible=Yes;
                                                                DepartmentCategory=Reports and Analysis }
    { MenuItem       ;[{5C8BAFCC-1876-4A24-804E-8C12E1D1DBFB}] ;Name=Registers;
                                                                CaptionML=[DEU=Journale;
                                                                           ENU=Registers];
                                                                RunObjectType=Page;
                                                                RunObjectID=107;
                                                                Visible=Yes;
                                                                NextNodeID=[{E22EE535-AB97-444F-B411-23F7347D50C0}];
                                                                DepartmentCategory=Tasks }
    { MenuItem       ;[{0AC86023-FC93-4C23-8F15-278D2FFF272E}] ;Name=Delete Invoiced Service Orders;
                                                                CaptionML=[DEU=Fakturierte ServiceauftrÑge lîschen;
                                                                           ENU=Delete Invoiced Service Orders];
                                                                RunObjectType=Report;
                                                                RunObjectID=5914;
                                                                Visible=Yes;
                                                                NextNodeID=[{0AC86023-FC93-4C23-8F15-278D2FFF272E}];
                                                                DepartmentCategory=Reports and Analysis }
    { MenuGroup      ;[{B59D4AE7-378E-41BC-A813-B1FB5ABC4D20}] ;Name=Telefonie;
                                                                CaptionML=[DEU=Telefonie;
                                                                           ENU=Telephonie];
                                                                MemberOfMenu=[{C5D52441-34B2-4F6B-BFA1-033C708A958F}];
                                                                ParentNodeID=[{C5D52441-34B2-4F6B-BFA1-033C708A958F}];
                                                                Visible=Yes;
                                                                NextNodeID=[{43954EB0-EC5C-487A-82ED-8851BDD53BFA}];
                                                                FirstChild=[{27EFE9AA-2448-46BA-8D7B-2FDAD910C9E3}] }
    { MenuItem       ;[{27EFE9AA-2448-46BA-8D7B-2FDAD910C9E3}] ;Name=TAPI Benutzer;
                                                                CaptionML=[DEU=TAPI Benutzer;
                                                                           ENU=TAPI User];
                                                                MemberOfMenu=[{C5D52441-34B2-4F6B-BFA1-033C708A958F}];
                                                                RunObjectType=Page;
                                                                RunObjectID=56783;
                                                                ParentNodeID=[{B59D4AE7-378E-41BC-A813-B1FB5ABC4D20}];
                                                                Visible=Yes;
                                                                NextNodeID=[{9D92AB1F-AD75-4CC8-9FCD-A4FFBFCDCF71}];
                                                                DepartmentCategory=Lists }
    { MenuItem       ;[{9D92AB1F-AD75-4CC8-9FCD-A4FFBFCDCF71}] ;Name=Telefonnr. suchen;
                                                                CaptionML=[DEU=Telefonnr. suchen;
                                                                           ENU=Find Phone No.];
                                                                MemberOfMenu=[{C5D52441-34B2-4F6B-BFA1-033C708A958F}];
                                                                RunObjectType=Page;
                                                                RunObjectID=56792;
                                                                ParentNodeID=[{B59D4AE7-378E-41BC-A813-B1FB5ABC4D20}];
                                                                Visible=Yes;
                                                                NextNodeID=[{427394AE-7B73-4336-B123-B551F7F79991}];
                                                                DepartmentCategory=Tasks }
    { MenuItem       ;[{427394AE-7B73-4336-B123-B551F7F79991}] ;Name=Journal TAPI;
                                                                CaptionML=[DEU=Journal TAPI;
                                                                           ENU=TAPI Logs];
                                                                MemberOfMenu=[{C5D52441-34B2-4F6B-BFA1-033C708A958F}];
                                                                RunObjectType=Page;
                                                                RunObjectID=56784;
                                                                ParentNodeID=[{B59D4AE7-378E-41BC-A813-B1FB5ABC4D20}];
                                                                Visible=Yes;
                                                                NextNodeID=[{00000000-0000-0000-0000-000000000000}];
                                                                DepartmentCategory=Lists }
  }
}
OBJECT Page 56780 Menu Phone No. found
{
  OBJECT-PROPERTIES
  {
    Date=11.05.13;
    Time=11:00:00;
    Modified=Yes;
    Version List=AO,AT2013;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[DEU=Eingehend: Auswahl Telefonnr. gefunden;
               ENU=Inbound: Menu Phone No. found];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    PageType=Card;
    OnOpenPage=BEGIN
                 TestNo := TAPIFu.TAPIRights;

                 LineEntryNo := 0;

                 TAPIEinr.GET;

                 TAPIUser.INIT;
                 IF TAPIUser.GET(USERID) THEN ;

                 // Standard Setup for Phoning / Standard-Einstellung fÅr Telefonie
                 LineMediaMode_InteractiveVoice := 4;

                 // Standard Setup for Modem Phoning / Standard-Einstellung fÅr Modem-Telefonie
                 LineMediaMode_DataModem := 16;

                 // Length of internal Phone No. / LÑnge der internen Rufnummern
                 LenOfInternal := TAPIEinr."Length of internal phone No.";

                 // Create Global key for (redirected) calls /
                 // Zentralen SchlÅssel fÅr (weitergeleitete) Telefonate erstellen
                 CallDataErstellen := TAPIEinr."Create call data";

                 TAPIDriverName := TAPIFu.TAPILineReady(TestNo);

                 // AT 2011 CHANGED
                 IF ISCLEAR(ATEventSource) THEN
                   CREATE(ATEventSource,TRUE,TRUE);

                 IF ISCLEAR(ATTelephony) THEN
                   CREATE(ATTelephony,TRUE,TRUE);
                 // AT2011 END
               END;

    OnClosePage=BEGIN
                  // AT2011 CHANGED
                  CLEAR(ATTelephony);
                  CLEAR(ATEventSource);
                  // AT2011 END
                END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000010;1 ;Action    ;
                      Name=CustCard;
                      CaptionML=[DEU=Debitor anzeigen (Karte);
                                 ENU=Show Customer (Card)];
                      Promoted=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Cust.RESET;
                                 IF OriginTab = 18 THEN
                                   IF Cust.GET(OriginKey1) THEN ;

                                 // AT2013 CHANGED
                                 PAGE.RUN(21, Cust, Cust.Name);
                               END;
                                }
      { 1000000011;1 ;Action    ;
                      Name=ContCard;
                      CaptionML=[DEU=Kontakt anzeigen (Karte);
                                 ENU=Show Contact (Card)];
                      Promoted=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ContAtt.RESET;
                                 IF OriginTab = 5050 THEN
                                   IF ContAtt.GET(OriginKey1) THEN ;

                                 // AT2013 CHANGED
                                 PAGE.RUN(5050, ContAtt, ContAtt.Name);
                               END;
                                }
      { 3       ;1   ;Action    ;
                      Name=VendKart;
                      CaptionML=[DEU=Kreditor anzeigen (Karte);
                                 ENU=Show Vendor (Card)];
                      Promoted=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Vend.RESET;
                                 IF OriginTab = 23 THEN
                                   IF Vend.GET(OriginKey1) THEN ;

                                 // AT2013 CHANGED
                                 PAGE.RUN(26, Vend, Vend.Name);
                               END;
                                }
      { 1000000005;1 ;Action    ;
                      Name=ItemList;
                      CaptionML=[DEU=Lager (Artikel-öbersicht);
                                 ENU=Inventory (Item List)];
                      Promoted=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 // AT2013 CHANGED
                                 PAGE.RUN(31);
                               END;
                                }
      { 1000000009;1 ;Action    ;
                      Name=SalesOrder;
                      CaptionML=[DEU=Verkauf (Auftrags-Karte);
                                 ENU=Sales (Order Card)];
                      Promoted=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 SalesHeader.RESET;
                                 SalesHeader.SETRANGE("Document Type", SalesHeader."Document Type"::Order);
                                 IF OriginTab = 18 THEN BEGIN
                                   SalesHeader.SETRANGE("Sell-to Customer No.", OriginKey1);
                                   IF SalesHeader.FIND('+') THEN BEGIN
                                 // AT2013 CHANGED
                                     PAGE.RUN(42, SalesHeader, SalesHeader."Sell-to Customer No.");
                                   END ELSE BEGIN
                                     SalesHeader.SETRANGE("Sell-to Customer No.");
                                     IF SalesHeader.FIND('+') THEN;
                                 // AT2013 CHANGED
                                     PAGE.RUN(42, SalesHeader, SalesHeader."No.");
                                   END;
                                 END ELSE
                                 // AT2013 CHANGED
                                   PAGE.RUN(42);
                                 SalesHeader.RESET;
                               END;
                                }
      { 1000000008;1 ;Action    ;
                      Name=SalesQuote;
                      CaptionML=[DEU=Angebote;
                                 ENU=Quotes];
                      Promoted=Yes;
                      Image=Quote;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 SalesHeader.RESET;
                                 SalesHeader.SETRANGE("Document Type", SalesHeader."Document Type"::Quote);
                                 IF OriginTab = 18 THEN BEGIN
                                   SalesHeader.SETRANGE("Sell-to Customer No.", OriginKey1);
                                   IF SalesHeader.FIND('+') THEN BEGIN
                                 // AT2013 CHANGED
                                     PAGE.RUN(41, SalesHeader, SalesHeader."Sell-to Customer No.");
                                   END ELSE BEGIN
                                     SalesHeader.SETRANGE("Sell-to Customer No.");
                                     IF SalesHeader.FIND('+') THEN;
                                 // AT2013 CHANGED
                                     PAGE.RUN(41, SalesHeader, SalesHeader."No.");
                                   END;
                                 END ELSE
                                 // AT2013 CHANGED
                                   PAGE.RUN(41);
                                 SalesHeader.RESET;
                               END;
                                }
      { 1000000007;1 ;Action    ;
                      Name=SalesInv;
                      CaptionML=[DEU=Rechnungen;
                                 ENU=Invoices];
                      Promoted=Yes;
                      Image=Invoice;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 SalesHeader.RESET;
                                 SalesHeader.SETRANGE("Document Type", SalesHeader."Document Type"::Invoice);
                                 IF OriginTab = 18 THEN BEGIN
                                   SalesHeader.SETRANGE("Sell-to Customer No.", OriginKey1);
                                   IF SalesHeader.FIND('+') THEN BEGIN
                                 // AT2013 CHANGED
                                     PAGE.RUN(43, SalesHeader, SalesHeader."Sell-to Customer No.");
                                   END ELSE BEGIN
                                     SalesHeader.SETRANGE("Sell-to Customer No.");
                                     IF SalesHeader.FIND('+') THEN;
                                 // AT2013 CHANGED
                                     PAGE.RUN(43, SalesHeader, SalesHeader."No.");
                                   END;
                                 END ELSE
                                 // AT2013 CHANGED
                                   PAGE.RUN(43);
                               END;
                                }
      { 6       ;1   ;Action    ;
                      Name=PostedSalesInv;
                      CaptionML=[DEU=Gebuchte Rechnungen;
                                 ENU=Posted Invoices];
                      Promoted=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PInvHeader.RESET;
                                 IF OriginTab = 18 THEN BEGIN
                                   PInvHeader.SETRANGE("Sell-to Customer No.", OriginKey1);
                                   IF PInvHeader.FIND('+') THEN BEGIN
                                 // AT2013 CHANGED
                                     PAGE.RUN(132, PInvHeader, PInvHeader."Sell-to Customer No.");
                                   END ELSE BEGIN
                                     PInvHeader.SETRANGE("Sell-to Customer No.");
                                     IF PInvHeader.FIND('+') THEN;
                                 // AT2013 CHANGED
                                     PAGE.RUN(132, PInvHeader, PInvHeader."Sell-to Customer Name");
                                   END;
                                 END ELSE
                                 // AT2013 CHANGED
                                   PAGE.RUN(132);
                                 PInvHeader.RESET;
                               END;
                                }
      { 1000000006;1 ;Action    ;
                      Name=SalesCrM;
                      CaptionML=[DEU=Gutschriften;
                                 ENU=Credit Memos];
                      Promoted=Yes;
                      Image=CreditMemo;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 SalesHeader.RESET;
                                 SalesHeader.SETRANGE("Document Type", SalesHeader."Document Type"::"Credit Memo");
                                 IF OriginTab = 18 THEN BEGIN
                                   SalesHeader.SETRANGE("Sell-to Customer No.", OriginKey1);
                                   IF SalesHeader.FIND('+') THEN BEGIN
                                 // AT2013 CHANGED
                                     PAGE.RUN(44, SalesHeader, SalesHeader."Sell-to Customer No.");
                                   END ELSE BEGIN
                                     SalesHeader.SETRANGE("Sell-to Customer No.");
                                     IF SalesHeader.FIND('+') THEN;
                                 // AT2013 CHANGED
                                     PAGE.RUN(44, SalesHeader, SalesHeader."No.");
                                   END;
                                 END ELSE
                                 // AT2013 CHANGED
                                   PAGE.RUN(44);
                               END;
                                }
      { 7       ;1   ;Action    ;
                      Name=PostedSalesCrM;
                      CaptionML=[DEU=Gebuchte Gutschriften;
                                 ENU=Posted Credit Memos];
                      Promoted=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 PCrMHeader.RESET;
                                 IF OriginTab = 18 THEN BEGIN
                                   PCrMHeader.SETRANGE("Sell-to Customer No.", OriginKey1);
                                   IF PCrMHeader.FIND('+') THEN BEGIN
                                 // AT2013 CHANGED
                                     PAGE.RUN(134, PCrMHeader, PCrMHeader."Sell-to Customer No.");
                                   END ELSE BEGIN
                                     PCrMHeader.SETRANGE("Sell-to Customer No.");
                                     IF PCrMHeader.FIND('+') THEN;
                                 // AT2013 CHANGED
                                     PAGE.RUN(134, PCrMHeader, PCrMHeader."Sell-to Customer Name");
                                   END;
                                 END ELSE
                                 // AT2013 CHANGED
                                   PAGE.RUN(134);
                                 PCrMHeader.RESET;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1000000014;1;Field  ;
                CaptionML=[DEU=Name;
                           ENU=Name];
                SourceExpr=Name;
                Editable=FALSE;
                Style=Standard;
                StyleExpr=TRUE }

    { 1000000013;1;Field  ;
                CaptionML=[DEU=Telefon-Nr.;
                           ENU=Phone No.];
                SourceExpr=PhoneNo;
                Editable=FALSE }

    { 1000000012;1;Field  ;
                CaptionML=[DEU=Herkunft;
                           ENU=Origin];
                SourceExpr=Origin;
                Editable=FALSE }

    { 1000000021;1;Field  ;
                CaptionML=[DEU=Herkunft-Nr.;
                           ENU=Origin No.];
                SourceExpr=OriginNr;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      Text001@1008 : TextConst 'DEU=Debitor;ENU=Customer';
      Text002@1010 : TextConst 'DEU=Kreditor;ENU=Vendor';
      Text003@1011 : TextConst 'DEU=Kontaktperson;ENU=Contact person';
      Text004@1012 : TextConst 'DEU=Interessent;ENU=Prospect';
      ATTelephony@1005 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{7D58078D-E0FB-4D64-9829-B909B8F6D8F6}:'activeTAPI-Telephony'.Telephony";
      ATEventSource@1014 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{206D2787-8575-4750-A727-38FC5DBFA1A3}:'activeTAPI-Telephony'.EventSource" WITHEVENTS;
      Cust@1000000003 : Record 18;
      Vend@1000000002 : Record 23;
      ContAtt@1009 : Record 5050;
      SalesHeader@1000 : Record 36;
      PInvHeader@1001 : Record 112;
      PCrMHeader@1002 : Record 114;
      TAPIEinr@1000000012 : Record 56782;
      TAPIUser@1000000017 : Record 56783;
      TAPIFu@1000000022 : Codeunit 56780;
      Name@1000000011 : Text[50];
      PhoneNo@1000000010 : Text[30];
      Origin@1000000009 : Text[30];
      OriginNr@1000000008 : Text[30];
      TAPIDriverName@1000000018 : Text[50];
      MachName@1003 : Text[50];
      OriginKey1@1000000005 : Code[20];
      OriginKey2@1000000004 : Code[20];
      OriginTab@1000000007 : Integer;
      LineEntryNo@1000000006 : Integer;
      LineMediaMode_InteractiveVoice@1000000013 : Integer;
      LineMediaMode_DataModem@1000000014 : Integer;
      LenOfInternal@1000000015 : Integer;
      TestNo@1000000021 : Integer;
      CallDataErstellen@1000000016 : Boolean;
      Text005@1006 : TextConst 'DEU=Sie mÅssen Name TAPI Leitung bei PC %1 eingeben (TAPI Einrichtung, PC''s und TAPI Leitungen).;ENU=You must input TAPI Line name for PC %1 (TAPI Setup, PC''s and TAPI Lines).';
      Text006@1007 : TextConst 'DEU=Sie mÅssen PC %1 und Name TAPI Leitung anlegen (TAPI Einrichtung, PC''s und TAPI Leitungen).;ENU=You must input PC %1 and TAPI Line name (TAPI Setup, PC''s and TAPI Lines).';
      Text007@1013 : TextConst 'DEU=Kontakt;ENU=Contact';
      Text19012710@19068865 : TextConst 'DEU=Ankommender Anruf:;ENU=Incoming Call:';
      Text19063590@19002408 : TextConst 'DEU=Telefonnr. gefunden;ENU=Phone No. found';

    PROCEDURE DefVar@1(NewName@1000 : Text[50];NewPhoneNo@1001 : Text[30];NewOriginTab@1002 : Integer;NewOriginKey1@1003 : Code[20];NewOriginKey2@1004 : Code[20]);
    BEGIN
      Name := NewName;
      PhoneNo := NewPhoneNo;
      OriginTab := NewOriginTab;
      OriginKey1 := NewOriginKey1;
      OriginKey2 := NewOriginKey2;
      CASE OriginTab OF
      // Customer / Debitor
        18:
          BEGIN
            Origin := Text001;
            OriginNr := DELCHR(OriginKey1,'<>');
          END;
      // Vendor / Kreditor
        23:
          BEGIN
            Origin := Text002;
            OriginNr := DELCHR(OriginKey1,'<>');
          END;
      // Contact / Kontakt
        5050:
          BEGIN
            Origin := Text007;
            OriginNr := DELCHR(OriginKey1,'<>');
          END;
        ELSE BEGIN
          Origin := '';
          OriginNr := '';
        END;
      END;
    END;

    EVENT ATEventSource@1014::CallNew@1(CurrentCall@1113900000 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{BA7151F3-8ECC-4507-9F7C-1C38E76F0054}:'activeTAPI-Telephony'._ActiveCall");
    BEGIN
    END;

    EVENT ATEventSource@1014::CallFinished@2(CurrentCall@1113900000 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{BA7151F3-8ECC-4507-9F7C-1C38E76F0054}:'activeTAPI-Telephony'._ActiveCall");
    BEGIN
      CurrPage.CLOSE;
    END;

    EVENT ATEventSource@1014::lineMessage@3(CurrentCall@1113900005 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{BA7151F3-8ECC-4507-9F7C-1C38E76F0054}:'activeTAPI-Telephony'._ActiveCall";CallHandleOrLineHandle@1113900004 : Integer;message@1113900003 : Integer;param1@1113900002 : Integer;param2@1113900001 : Integer;param3@1113900000 : Integer);
    BEGIN
    END;

    EVENT ATEventSource@1014::CallUserInfo@4(CurrentCall@1113900003 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{BA7151F3-8ECC-4507-9F7C-1C38E76F0054}:'activeTAPI-Telephony'._ActiveCall";UserInfoBits@1113900002 : Integer;OldValue@1113900001 : Text[1024];NewValue@1113900000 : Text[1024]);
    BEGIN
    END;

    EVENT ATEventSource@1014::WatchDog@5();
    BEGIN
    END;

    BEGIN
    {
      AT05.00       16.06.2007  Length of all name-fields changed from 30 to 50
      AT05.00.01    13.03.2008  New Connection with Automation objects
      AT2011        05.04.2011  Changes for RTC: CREATE, Order of buttons
                                Old Code deleted
      AT2011.3      11.10.2011  Reassignment of Automation Variables
      AT2013        11.05.2013  FORM replaced by PAGE
    }
    END.
  }
}

OBJECT Page 56781 Incoming call
{
  OBJECT-PROPERTIES
  {
    Date=05.04.11;
    Time=17:00:00;
    Modified=Yes;
    Version List=AO,AT2011;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[DEU=Ankommender Anruf;
               ENU=Incoming call];
    InsertAllowed=No;
    DeleteAllowed=No;
    PageType=Card;
    TimerUpdate=1;
    OnInit=BEGIN
             IF ISCLEAR( AppTrace) THEN
               CREATE( AppTrace, TRUE, TRUE);

             IF ISCLEAR(WSHShell) THEN
               CREATE( WSHShell, TRUE, TRUE);

             AppTrace.DebugMessage('OnInit: Incoming Call');
           END;

    OnOpenPage=BEGIN
                 "RTC-Timer" := '20';

                 AppTrace.DebugMessage('OnOpenPage: Incoming Call');
               END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 2   ;1   ;Field     ;
                CaptionML=[DEU=Name;
                           ENU=Name];
                SourceExpr=Name;
                Editable=FALSE;
                Style=Standard;
                StyleExpr=TRUE }

    { 4   ;1   ;Field     ;
                CaptionML=[DEU=Telefon-Nr.;
                           ENU=Phone No.];
                SourceExpr=PhoneNo;
                Editable=FALSE }

    { 6   ;1   ;Field     ;
                CaptionML=[DEU=Herkunft-Nr.;
                           ENU=Origin No.];
                SourceExpr=OriginNr;
                Editable=FALSE }

    { 9   ;1   ;Field     ;
                CaptionML=[DEU=Herkunft;
                           ENU=Origin];
                SourceExpr=Origin;
                Editable=FALSE }

    { 1113900000;1;Field  ;
                Name=<timer>;
                CaptionML=DEU=timer;
                SourceExpr="RTC-Timer";
                ControlAddIn=[activeTAPI.TimerControl;PublicKeyToken=af0172fa8a858f15];
                OnControlAddIn=BEGIN
                                 // AppTrace.DebugMessage(STRSUBSTNO('Timer OnControlAddIn: Index %1 Message %2 vor WSH', FORMAT(Index), Data));
                                 WSHShell.SendKeys('{ESC}');
                                 // AppTrace.DebugMessage(STRSUBSTNO('Timer OnControlAddIn: Index %1 Message %2 nach WSH', FORMAT(Index), Data));
                               END;
                                }

  }
  CODE
  {
    VAR
      AppTrace@1113900001 : Automation "{600E23A8-24BF-43EE-BA93-691E0DFFAD1A} 2.0:{1B61767C-91A3-4632-9E92-A8C29C7DA936}:'activeTAPI_NET_Services'.AppTrace";
      WSHShell@1113900006 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      Cust@1113900004 : Record 18;
      Vend@1113900003 : Record 23;
      ContAtt@1113900002 : Record 5050;
      Name@1000 : Text[50];
      PhoneNo@1001 : Text[30];
      Origin@1002 : Text[50];
      OriginNr@1014 : Text[30];
      "RTC-Timer"@1113900000 : Text[10];
      OriginTab@1003 : Integer;
      Counter@1113900005 : Integer;
      OriginKey1@1004 : Code[20];
      OriginKey2@1005 : Code[20];
      Text001@1008 : TextConst 'DEU=Debitor;ENU=Customer';
      Text002@1010 : TextConst 'DEU=Kreditor;ENU=Vendor';
      Text003@1011 : TextConst 'DEU=Kontaktperson;ENU=Contact person';
      Text004@1012 : TextConst 'DEU=Interessent;ENU=Prospect';
      Text005@1013 : TextConst 'DEU=Kontakt;ENU=Contact';
      Text19012710@19068865 : TextConst 'DEU=Ankommender Anruf:;ENU=Incoming Call:';

    PROCEDURE DefVar@1(NewName@1000 : Text[50];NewPhoneNo@1001 : Text[30];NewOriginTab@1002 : Integer;NewOriginKey1@1003 : Code[20];NewOriginKey2@1004 : Code[20]);
    BEGIN
      Name := NewName;
      PhoneNo := NewPhoneNo;
      OriginTab := NewOriginTab;
      OriginKey1 := NewOriginKey1;
      OriginKey2 := NewOriginKey2;
      CASE OriginTab OF
      // Customer / Debitor
        18:
          BEGIN
            Origin := Text001;
            OriginNr := DELCHR(OriginKey1,'<>');
          END;
      // Vendor / Kreditor
        23:
          BEGIN
            Origin := Text002;
            OriginNr := DELCHR(OriginKey1,'<>');
          END;
      // Contact / Kontakt
        5050:
          BEGIN
            Origin := Text005;
            OriginNr := DELCHR(OriginKey1,'<>');
          END;
        ELSE BEGIN
          Origin := '';
          OriginNr := '';
        END;
      END;
    END;

    BEGIN
    {
      AT2011   05.04.2011   New for RTC: Timer for closing page (Unit: 1/10 Sec.; f.e. 50 = 5 Sec.)
                            AppTrace, Windows Script Host, Old Code deleted
    }
    END.
  }
}

OBJECT Page 56782 TAPI Setup Card
{
  OBJECT-PROPERTIES
  {
    Date=05.04.11;
    Time=17:00:00;
    Modified=Yes;
    Version List=AT2011;
  }
  PROPERTIES
  {
    CaptionML=[DEU=TAPI Einrichtung Karte;
               ENU=TAPI Setup Card];
    DeleteAllowed=No;
    SourceTable=Table56782;
    PageType=Card;
    ActionList=ACTIONS
    {
      { 1113900000;  ;ActionContainer;
                      CaptionML=DEU=Start;
                      ActionContainerType=ActionItems }
      { 1113900001;1 ;Action    ;
                      CaptionML=DEU=Start Page with Timer;
                      RunObject=Page 56785 }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                CaptionML=[DEU=Allgemein;
                           ENU=General] }

    { 2   ;2   ;Field     ;
                SourceExpr="Length of internal phone No." }

    { 4   ;2   ;Field     ;
                SourceExpr="Action for incoming call" }

    { 6   ;2   ;Field     ;
                SourceExpr="Create call data" }

    { 8   ;2   ;Field     ;
                SourceExpr="TAPI line name" }

    { 11  ;2   ;Field     ;
                SourceExpr="Min. length fÅr Phoneindex" }

    { 13  ;2   ;Field     ;
                SourceExpr="Format Phone Numbers" }

    { 1000000000;2;Field  ;
                SourceExpr="Format Fax Numbers" }

    { 1000000002;2;Field  ;
                CaptionML=[DEU=PrÅfung doppelte Nummern;
                           ENU=Check of double numbers];
                SourceExpr="Check of double numbers" }

    { 1000000004;2;Field  ;
                SourceExpr="Create Interaction Log Entry" }

    { 1108800000;2;Field  ;
                SourceExpr="Log internal calls" }

  }
  CODE
  {

    BEGIN
    {
      AT01.20      08.09.2003  Fields added: Min. length fÅr Phoneindex
                                             Format Phone Numbers (at the end)
      AT04.00      04.11.2005  Field added: Format Fax Numbers
      AT2009       06.11.2009  Field added: Check of double numbers
                               Field added: Create Interaction Log Entry
      AT2011       05.04.2011  Field added: Log internal calls
    }
    END.
  }
}

OBJECT Page 56783 TAPI User
{
  OBJECT-PROPERTIES
  {
    Date=05.04.11;
    Time=17:00:00;
    Modified=Yes;
    Version List=AT2011;
  }
  PROPERTIES
  {
    CaptionML=[DEU=TAPI Benutzer;
               ENU=TAPI User];
    SourceTable=Table56783;
    PageType=List;
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr=User }

    { 17  ;2   ;Field     ;
                SourceExpr=Blocked }

    { 15  ;2   ;Field     ;
                SourceExpr="Action for incoming call" }

    { 4   ;2   ;Field     ;
                SourceExpr="Action for new ext. Phone No." }

    { 1000000000;2;Field  ;
                SourceExpr="Action for end of incom. call" }

    { 1000000002;2;Field  ;
                SourceExpr="Action for end of outgo. call" }

    { 6   ;2   ;Field     ;
                SourceExpr="Start activeTAPI Dialer" }

    { 8   ;2   ;Field     ;
                Lookup=Yes;
                SourceExpr="Directory of dialer";
                OnLookup=BEGIN
                           // AT2009.01 INSERT BEGIN
                           IF ISSERVICETIER THEN BEGIN
                           END ELSE BEGIN
                           // AT2009.01 INSERT END
                             IF "Start activeTAPI Dialer" THEN BEGIN
                               ImpName := BLOBTemp.IMPORT('*.exe',TRUE);
                               IF ImpName <> '' THEN BEGIN
                                 CLEAR(BLOBTemp);
                                 "Directory of dialer" := ImpName;
                               END;
                               CurrPage.UPDATE;
                             END;
                           // AT2009.01 INSERT BEGIN
                           END;
                           // AT2009.01 INSERT END
                         END;
                          }

    { 10  ;2   ;Field     ;
                SourceExpr="TAPI line name" }

  }
  CODE
  {
    VAR
      ImpName@1000000000 : Text[500];

    BEGIN
    {
      AT2009   06.11.2009   New fields: "Action for end of incom. call", "Action for end of outgo. call"
      AT2011   05.04.2011   Page created, changes for RTC: IMPORT bei Directory of dialer
    }
    END.
  }
}

OBJECT Page 56784 TAPI Logs
{
  OBJECT-PROPERTIES
  {
    Date=02.12.14;
    Time=13:00:00;
    Modified=Yes;
    Version List=AT2015;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[DEU=TAPI Protokolle;
               ENU=TAPI Logs];
    SourceTable=Table56780;
    SourceTableView=SORTING(User,Entry No.);
    PageType=List;
    OnOpenPage=BEGIN
                 // AT2009 BEGIN
                 IF (UserSetUp.GET(USERID)) AND (UserSetUp."See TAPI Logfile completely") THEN BEGIN
                   SETRANGE(User, USERID);
                 END ELSE BEGIN
                   FILTERGROUP := 2;
                   SETRANGE(User, USERID);
                   FILTERGROUP := 0;
                 END;
                 // AT2009 END
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000000;1 ;Action    ;
                      CaptionML=[DEU=&Anrufen;
                                 ENU=&Dial];
                      Promoted=Yes;
                      Image=Calls;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 // AT2015 CHANGED
                                 { ORIGINAL
                                 // AT2009 BEGIN
                                 IF Direction = Direction::out THEN
                                   PhoneNo := "Called ID"
                                 ELSE
                                   PhoneNo := "Caller ID";
                                 TAPIFu.DialNo(PhoneNo);
                                 END }
                                 // AT2009 END
                                 IF "Remote ID" <> '' THEN
                                   TAPIFu.DialNo("Remote ID");
                                 // AT2015
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr="Entry No." }

    { 4   ;2   ;Field     ;
                SourceExpr="Key local" }

    { 6   ;2   ;Field     ;
                SourceExpr=Date }

    { 8   ;2   ;Field     ;
                SourceExpr=Time }

    { 10  ;2   ;Field     ;
                SourceExpr=User }

    { 12  ;2   ;Field     ;
                SourceExpr=Direction }

    { 14  ;2   ;Field     ;
                SourceExpr=State }

    { 16  ;2   ;Field     ;
                SourceExpr=External }

    { 18  ;2   ;Field     ;
                SourceExpr="Duration (Sec.)" }

    { 20  ;2   ;Field     ;
                SourceExpr="Remote ID" }

    { 22  ;2   ;Field     ;
                SourceExpr="Remote ID Name" }

    { 59  ;2   ;Field     ;
                SourceExpr="Local ID" }

    { 61  ;2   ;Field     ;
                SourceExpr="Local ID Name" }

    { 24  ;2   ;Field     ;
                SourceExpr="Key global";
                Visible=FALSE }

    { 53  ;2   ;Field     ;
                SourceExpr=UserInfo2;
                Visible=FALSE }

    { 26  ;2   ;Field     ;
                SourceExpr="Caller ID" }

    { 32  ;2   ;Field     ;
                SourceExpr="Called ID" }

    { 36  ;2   ;Field     ;
                SourceExpr="Connected ID";
                Visible=FALSE }

    { 40  ;2   ;Field     ;
                SourceExpr="Redirection ID";
                Visible=FALSE }

    { 44  ;2   ;Field     ;
                SourceExpr="Redirecting ID";
                Visible=FALSE }

    { 55  ;2   ;Field     ;
                SourceExpr=Reference }

    { 57  ;2   ;Field     ;
                SourceExpr=Note }

  }
  CODE
  {
    VAR
      "***** activeTAPI *****"@1000000000 : Integer;
      UserSetUp@1000000001 : Record 91;
      PhoneNo@1000000002 : Text[30];
      TAPIFu@1000000003 : Codeunit 56780;

    BEGIN
    {
      AT01.20      08.09.2003 Fields Added:   Local ID (Name), Remote ID (Name)
                              Fields deleted: UserInfo, UserInfo1
      AT2009       06.11.2009 Global Var UserSetup Rec 91
                              Filter according to User SetUp
                              SourceTableView changed from  SORTING(Entry No.)  to  SORTING(User,Entry No.)
                              Global Vars: PhoneNo   Text 30
                                           TAPIFu    CU 56780
                              Button Dial
      AT2011       05.04.2011 Page created
      AT2013       11.05.2013 Button Dial: Promoted Yes, PromotedCategory Process, Image Calls
      AT2015       02.12.2014 Dial Remote ID
    }
    END.
  }
}

OBJECT Page 56785 Page with Timer
{
  OBJECT-PROPERTIES
  {
    Date=03.02.15;
    Time=19:00:00;
    Modified=Yes;
    Version List=AT2015;
  }
  PROPERTIES
  {
    Editable=No;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    PageType=ConfirmationDialog;
    OnInit=BEGIN
             // IF ISCLEAR( AppTrace) THEN
             //  CREATE( AppTrace, TRUE, TRUE);

             // AppTrace.DebugMessage('OnInit: Page with Timer');
           END;

    OnOpenPage=VAR
                 ATUser@1000000000 : Boolean;
               BEGIN
                 // AT 2015
                 ATUser := FALSE;
                 IF UserSetUp.GET(USERID) THEN
                   IF (UserSetUp."Use activeTAPI") THEN
                     ATUser := TRUE;

                 IF NOT ATUser THEN BEGIN
                   IF ISCLEAR(WSHShell) THEN
                     CREATE(WSHShell, TRUE, TRUE);
                   WSHShell.SendKeys('{ESC}');
                   IF NOT ISCLEAR(WSHShell) THEN
                     CLEAR(WSHShell);
                     Confirmed := TRUE;
                 END;
                 // AT 2015

                 // Load Tracing

                 {
                 We use Schmidt e-Services AppTrace to trace some important information
                 into an File or UDP or ...
                 }
                 // AT2011
                 IF ISCLEAR(AppTrace) THEN BEGIN
                   CREATE(AppTrace,TRUE,TRUE);
                   AppTrace.InfoMessage('Start Trace in Page 56785');  // Trace a first INFO-Message
                 END;

                 IF ISCLEAR(ATTelephony) THEN BEGIN

                   // AT2011.3 refactored / Åberarbeitet

                   TestNo := TAPIFu.TAPIRights;
                   IF TestNo < 2 THEN
                     EXIT;

                   // Load and Initialize Telephony

                   {
                   The TelephonyService is activeTAPI's services layer to which all
                   applications must connect. Connecting to the service performs two
                   actions:
                   a) It registers Navision's EventHandler-Object (which has to be
                      created from Navision before)
                   b) It returns the activeTAPI.Telephony object which is THE
                      activeTAPI telephony.
                   }

                   AppTrace.InfoMessage('Initialize ATTelephony');

                   IF ISCLEAR(ATTelephony) THEN
                     CREATE(ATTelephony,TRUE,TRUE);

                   ATTelephony.Initialize('NAV Client');


                   // Configuration of Telephony

                   AppTrace.InfoMessage('Configure ATTelephony');

                   TAPIEInr.GET;
                   {
                   Overwrite activeTAPI's configuration settings with the values defined in
                   Navision's TAPI-Setup.
                   }

                   ATConfiguration := ATTelephony.activeTAPI_Configuration;

                   // Length of internal Phone No. / LÑnge der internen Rufnummern
                   ATConfiguration.LenOfInternal := TAPIEInr."Length of internal phone No.";

                   // Create Global key for (redirected) calls /
                   // Zentralen SchlÅssel fÅr (weitergeleitete) Telefonate erstellen
                   ATConfiguration.AutoSetCallData := TAPIEInr."Create call data";


                   // Configuration and Start of Line-Device

                   // Standard Setup for Phoning / Standard-Einstellung fÅr Telefonie
                   LineMediaMode_InteractiveVoice := 4;

                   // Standard Setup for Modem Phoning / Standard-Einstellung fÅr Modem-Telefonie
                   LineMediaMode_DataModem := 16;

                   // Owner Privilegs for selected line / Steuer-Rechte auf der gewÑhlten Leitung
                   LineCallPrivilegs_Owner := 4;

                   TAPIDriverName := TAPIFu.TAPILineReady(TestNo);

                   AppTrace.InfoMessage('Close open lines');
                   WHILE ATTelephony.Lines.Count > 0 DO BEGIN
                     ATTelephony.LineClose;
                   END;

                   // Open the Line on which we want to communicate (TAPIDriverName -> LineDeviceName)
                   AppTrace.InfoMessage('Line open');
                   ATTelephony.LineOpen(TAPIDriverName,LineCallPrivilegs_Owner,LineMediaMode_InteractiveVoice);

                   // AT2011 Start Dialer / Start WÑhlhilfe
                   TAPIFu.BeginOfTAPI;
                 END;

                 // Create the RTC event proxy object
                 // (This object will receive and queue the telephony events)
                 IF ISCLEAR( RtcEventManager) THEN BEGIN
                   AppTrace.DebugMessage('Create RTC Eventmanager');
                   CREATE( RtcEventManager, TRUE, TRUE);
                 END;

                 timer := '30';

                 // AppTrace.DebugMessage('OnOpenPage: Page with Timer');
               END;

    OnClosePage=BEGIN
                  // AppTrace.DebugMessage('OnClosePage: Page with Timer');

                  // AT 2015 BEGIN
                  IF NOT ISCLEAR(AppTrace) THEN
                    CLEAR(AppTrace);

                  IF NOT ISCLEAR( RtcEventManager) THEN
                    CLEAR(RtcEventManager);

                  IF NOT ISCLEAR(ATTelephony) THEN BEGIN
                    ATTelephony.Terminate;
                    CLEAR(ATTelephony);
                  END;
                  // AT 2015 END

                  CLEAR(timer);

                  TAPIFu.EndOfTAPI;
                END;

    OnQueryClosePage=BEGIN
                       IF Confirmed THEN
                         EXIT(TRUE)
                       ELSE
                         IF NOT CONFIRM(Text1000000000) THEN
                           EXIT(FALSE)
                         ELSE
                           EXIT(TRUE);
                     END;

  }
  CONTROLS
  {
    { 1113900000;0;Container;
                ContainerType=ContentArea }

    { 1113900001;1;Group  ;
                Name=Allgemein;
                GroupType=Group }

    { 1113900005;2;Field  ;
                Name=<timer>;
                CaptionML=DEU=Timer - DO NOT REMOVE;
                SourceExpr=timer;
                ControlAddIn=[activeTAPI.TimerControl;PublicKeyToken=af0172fa8a858f15];
                OnControlAddIn=BEGIN
                                 // Intializiation is done in Page 56785 OnOpenPage
                                 // This code polls the event queue each time the timer event
                                 // is called

                                 REPEAT
                                   EventType := RtcEventManager.GetNextEvent();
                                   AppTrace.InfoMessage( 'Got EventArguments of Type' +  FORMAT(EventType));

                                   // None = 0, CallNew = 1, CallFinished = 2, LineMessage = 3, CallUserInfo = 4
                                   CASE EventType OF
                                     0: BEGIN
                                          AppTrace.DebugMessage( 'Empty Queue');
                                        END;
                                     1: BEGIN
                                          AppTrace.DebugMessage( 'Got CallNew');
                                          CallNewEventArgs := RtcEventManager.GetCallNewEventArgs;
                                          TAPIFu.HandleCallNew(CallNewEventArgs.CurrentCall);
                                          AppTrace.DebugMessage( 'Got CallNew after Handle');
                                        END;
                                     2: BEGIN
                                          AppTrace.InfoMessage( 'Got CallFinished');
                                          CallFinishedEventArgs := RtcEventManager.GetCallFinishedEventArgs;
                                          TAPIFu.HandleCallFinished(CallFinishedEventArgs.CurrentCall);
                                          AppTrace.InfoMessage( 'Got CallFinished after Handle');
                                        END;
                                     3: BEGIN
                                          AppTrace.InfoMessage( 'Got LineMessage');
                                          LineMessageEventArgs := RtcEventManager.GetLineMessageEventArgs;
                                          TAPIFu.HandleLineMessage(LineMessageEventArgs.CurrentCall);
                                          AppTrace.InfoMessage( 'Got LineMessage after Handle');
                                        END;
                                     4: BEGIN
                                          AppTrace.InfoMessage( 'Got CallUserInfo');
                                          CallUserInfoEventArgs := RtcEventManager.GetCallUserInfoEventArgs;
                                          TAPIFu.HandleCallUserInfo(CallUserInfoEventArgs.CurrentCall, CallUserInfoEventArgs.UserInfoBits);
                                          AppTrace.InfoMessage( 'Got CallUserInfo after Handle');
                                        END;
                                   END;
                                 UNTIL EventType=0;
                               END;
                                }

  }
  CODE
  {
    VAR
      ATTelephony@1113900007 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{7D58078D-E0FB-4D64-9829-B909B8F6D8F6}:'activeTAPI-Telephony'.Telephony";
      ATConfiguration@1113900008 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{1000FBBF-6480-40B4-B257-F077F04F59CF}:'activeTAPI-Telephony'.Configuration";
      RtcEventManager@1113900014 : Automation "{73E3A62C-9FED-4510-A909-E99B0A09401D} 1.0:{C4F5A613-4F8D-42A9-9B02-6D46566C8631}:'activeTAPI_RTC_Services'.RtcEventManager";
      CallNewEventArgs@1113900019 : Automation "{73E3A62C-9FED-4510-A909-E99B0A09401D} 1.0:{CEAB649D-F59A-4C07-B870-331B97D00C41}:'activeTAPI_RTC_Services'.ICallNewEventArgs";
      CallFinishedEventArgs@1113900018 : Automation "{73E3A62C-9FED-4510-A909-E99B0A09401D} 1.0:{71C8C807-6938-4AC6-AF94-FB1CC85A5EFD}:'activeTAPI_RTC_Services'.ICallFinishedEventArgs";
      LineMessageEventArgs@1113900016 : Automation "{73E3A62C-9FED-4510-A909-E99B0A09401D} 1.0:{A3593B54-81F2-42AF-9326-1FCB5EBA420F}:'activeTAPI_RTC_Services'.ILineMessageEventArgs";
      CallUserInfoEventArgs@1113900015 : Automation "{73E3A62C-9FED-4510-A909-E99B0A09401D} 1.0:{F608D7F7-1C9B-4C26-8054-CF1CBA701AC6}:'activeTAPI_RTC_Services'.ICallUserInfoEventArgs";
      AppTrace@1113900002 : Automation "{600E23A8-24BF-43EE-BA93-691E0DFFAD1A} 2.0:{1B61767C-91A3-4632-9E92-A8C29C7DA936}:'activeTAPI_NET_Services'.AppTrace";
      Text1000000000@1113900000 : TextConst 'DEU=Mit dem Schlie·en dieser Page beenden Sie die Telefonie-Verarbeitung. Fortfahren ?;ENU=If you close thos page, you will stop processing of telephony. Continue ?';
      WSHShell@1113900005 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      TAPIFu@1113900003 : Codeunit 56780;
      UserSetUp@1113900017 : Record 91;
      TAPIEInr@1113900006 : Record 56782;
      RtcEventLoopActive@1113900013 : Boolean;
      Confirmed@1113900001 : Boolean;
      LineCallPrivilegs_Owner@1113900012 : Integer;
      LineMediaMode_InteractiveVoice@1113900011 : Integer;
      LineMediaMode_DataModem@1113900010 : Integer;
      TestNo@1113900009 : Integer;
      EventType@1113900020 : Integer;
      TAPIDriverName@1113900004 : Text[50];
      timer@1113900021 : Text[10];

    BEGIN
    {
      AT2011   05.04.2011  New for RTC: Page with Timer, calls CU 56783, AppTrace
                           Warning OnClosePage
      AT2011.3 11.10.2011  Transfer of old Codeunit 56783 "TAPI for RTC" to this page
      AT2013   24.05.2014  Page Type Confirmation Dialog (thanks to Peter) instead of Card
               02.12.2014  No, it must be Card, because of 2 Errors while closing of NAV
      AT2015   03.02.2015  Clear all Automation Variables before Page Close
                           OnOpenPage   Local Var ATUser Boolean
                           PageType Confirmation Dialog: Non visible (Standard)
                           Option PageType Card: Page becomes visible
    }
    END.
  }
}

OBJECT Page 56786 Menu Phone No. not found
{
  OBJECT-PROPERTIES
  {
    Date=11.05.13;
    Time=11:00:00;
    Modified=Yes;
    Version List=AO,AT2013;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[DEU=Auswahl Telefonnr. nicht gefunden;
               ENU=Menu Phone No. not found];
    PageType=Card;
    OnOpenPage=BEGIN
                 TestNo := TAPIFu.TAPIRights;

                 LineEntryNo := 0;

                 TAPIEinr.GET;

                 TAPIUser.INIT;
                 IF TAPIUser.GET(USERID) THEN ;

                 // Standard Setup for Phoning / Standard-Einstellung fÅr Telefonie
                 LineMediaMode_InteractiveVoice := 4;

                 // Standard Setup for Modem Phoning / Standard-Einstellung fÅr Modem-Telefonie
                 LineMediaMode_DataModem := 16;

                 // Length of internal Phone No. / LÑnge der internen Rufnummern
                 LenOfInternal := TAPIEinr."Length of internal phone No.";

                 // Create Global key for (redirected) calls /
                 // Zentralen SchlÅssel fÅr (weitergeleitete) Telefonate erstellen
                 CallDataErstellen := TAPIEinr."Create call data";

                 TAPIDriverName := TAPIFu.TAPILineReady(TestNo);

                 // AT2011 CHANGED
                 IF ISCLEAR(ATEventSource) THEN
                   CREATE(ATEventSource,TRUE,TRUE);

                 IF ISCLEAR(ATTelephony) THEN
                   CREATE(ATTelephony,TRUE,TRUE);
                 // AT2011 END
               END;

    OnClosePage=BEGIN
                  // AT2011 CHANGED
                  CLEAR(ATTelephony);
                  CLEAR(ATEventSource);
                  // AT2011 END
                END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000000;1 ;Action    ;
                      Name=CustList;
                      CaptionML=[DEU=Suchen (Debitor öbersicht);
                                 ENU=Find (Customer List)];
                      Promoted=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 // AT2013 CHANGED
                                 PAGE.RUN(22);
                               END;
                                }
      { 1000000001;1 ;Action    ;
                      Name=CustCard;
                      CaptionML=[DEU=Debitor anlegen (Karte);
                                 ENU=Insert Customer (Card)];
                      Promoted=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 // AT2013 CHANGED
                                 PAGE.RUN(21);
                               END;
                                }
      { 1000000002;1 ;Action    ;
                      Name=ContCard;
                      CaptionML=[DEU=Kontakt anlegen (Karte);
                                 ENU=Insert Contact (Card)];
                      Promoted=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 // AT2013 CHANGED
                                 PAGE.RUN(5050);
                               END;
                                }
      { 3       ;1   ;Action    ;
                      Name=ItemList;
                      CaptionML=[DEU=Lager (Artikel-öbersicht);
                                 ENU=Inventory (Item List)];
                      Promoted=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 // AT2013 CHANGED
                                 PAGE.RUN(31);
                               END;
                                }
      { 5       ;1   ;Action    ;
                      Name=PhoneNoFindAgain;
                      CaptionML=[DEU=Telefonnr. erneut suchen;
                                 ENU=Find Phone No. again];
                      Promoted=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CurrPage.CLOSE;
                                 TAPIFu.PhoneNoFindAgain(PhoneNo);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1000000006;1;Field  ;
                CaptionML=[DEU=Telefon-Nr.;
                           ENU=Phone No.];
                SourceExpr=PhoneNo;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      ATTelephony@1003 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{7D58078D-E0FB-4D64-9829-B909B8F6D8F6}:'activeTAPI-Telephony'.Telephony" WITHEVENTS;
      ATEventSource@1002 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{206D2787-8575-4750-A727-38FC5DBFA1A3}:'activeTAPI-Telephony'.EventSource" WITHEVENTS;
      TAPIEinr@1000000001 : Record 56782;
      TAPIUser@1000000002 : Record 56783;
      TAPIFu@1000 : Codeunit 56780;
      PhoneNo@1000000008 : Text[30];
      TAPIDriverName@1000000007 : Text[50];
      MachName@1006 : Text[50];
      LineEntryNo@1000000000 : Integer;
      LineMediaMode_InteractiveVoice@1000000003 : Integer;
      LineMediaMode_DataModem@1000000004 : Integer;
      LenOfInternal@1000000005 : Integer;
      TestNo@1000000011 : Integer;
      CallDataErstellen@1000000006 : Boolean;
      Text19012710@19068865 : TextConst 'DEU=Ankommender Anruf:;ENU=Incoming Call:';
      Text19068692@19039855 : TextConst 'DEU=Telefonnr. nicht gefunden;ENU=Phone No. not found';

    PROCEDURE DefVar@1(NewPhoneNo@1001 : Text[30]);
    BEGIN
      PhoneNo := NewPhoneNo;
    END;

    EVENT ATEventSource@1002::CallNew@1(CurrentCall@1113900000 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{BA7151F3-8ECC-4507-9F7C-1C38E76F0054}:'activeTAPI-Telephony'._ActiveCall");
    BEGIN
    END;

    EVENT ATEventSource@1002::CallFinished@2(CurrentCall@1113900000 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{BA7151F3-8ECC-4507-9F7C-1C38E76F0054}:'activeTAPI-Telephony'._ActiveCall");
    BEGIN
      CurrPage.CLOSE;
    END;

    EVENT ATEventSource@1002::lineMessage@3(CurrentCall@1113900005 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{BA7151F3-8ECC-4507-9F7C-1C38E76F0054}:'activeTAPI-Telephony'._ActiveCall";CallHandleOrLineHandle@1113900004 : Integer;message@1113900003 : Integer;param1@1113900002 : Integer;param2@1113900001 : Integer;param3@1113900000 : Integer);
    BEGIN
    END;

    EVENT ATEventSource@1002::CallUserInfo@4(CurrentCall@1113900003 : Automation "{4A0E722A-1AD9-4643-8635-64564418E226} 1.1:{BA7151F3-8ECC-4507-9F7C-1C38E76F0054}:'activeTAPI-Telephony'._ActiveCall";UserInfoBits@1113900002 : Integer;OldValue@1113900001 : Text[1024];NewValue@1113900000 : Text[1024]);
    BEGIN
    END;

    EVENT ATEventSource@1002::WatchDog@5();
    BEGIN
    END;

    BEGIN
    {
      AT01a     13.03.2008   New Connection with Automation objects
      AT2011    05.04.2011   Changes for RTC: CREATE, new EventSource
      AT2011.3  11.10.2011   Reassignment of Automation Variables
      AT2013    11.05.2013   FORM replaced by PAGE
    }
    END.
  }
}

OBJECT Page 56787 TAPI Lines
{
  OBJECT-PROPERTIES
  {
    Date=05.04.11;
    Time=17:00:00;
    Modified=Yes;
    Version List=AT2011;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[DEU=TAPI Leitungen;
               ENU=TAPI Lines];
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=No;
    SourceTable=Table56784;
    PageType=List;
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 1000000000;2;Field  ;
                SourceExpr="TAPI Line name" }

  }
  CODE
  {

    BEGIN
    {
      AT2011   05.04.2011 Page created
    }
    END.
  }
}

OBJECT Page 56788 End of Call in
{
  OBJECT-PROPERTIES
  {
    Date=08.04.11;
    Time=18:00:00;
    Modified=Yes;
    Version List=AT2011;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Abschlu· Telefonat eingehend;
               ENU=End of call in];
    InsertAllowed=No;
    DeleteAllowed=No;
    PageType=Card;
    OnInit=BEGIN
             CallBackEnable := TRUE;
           END;

    OnOpenPage=BEGIN
                 IF TAPIFu.TAPIRights < 2 THEN
                   ERROR(Text007,USERID);

                 TAPISetup.GET;

                 TAPIUser.INIT;
                 IF TAPIUser.GET(USERID) THEN;

                 RefText := '';
                 NoteText := '';

                 // AT2009 BEGIN
                 IF Found THEN
                   CallBackEnable := TRUE
                 ELSE
                   CallBackEnable := FALSE;
                 // AT2009 END

                 // AT2011 START
                 IF Found THEN
                   TextFound := Text005
                 ELSE
                   TextFound := Text006;
                 // AT2011 END
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000000;1 ;Action    ;
                      Name=CallBack;
                      CaptionML=[DEU=&ZurÅckrufen;
                                 ENU=&Call back];
                      Promoted=Yes;
                      Enabled=CallBackEnable;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 // AT2009 BEGIN
                                 TAPILog.INIT;
                                 IF TAPILog.GET(GUID) THEN BEGIN
                                   TAPILog.Closed := TRUE;
                                   TAPILog.Reference := RefText;
                                   TAPILog.Note := NoteText;
                                   TAPILog.MODIFY;
                                 END;
                                 CurrPage.CLOSE;

                                 TAPIFu.DialNo(PhoneNo);
                                 // AT2009 END
                               END;
                                }
      { 3       ;1   ;Action    ;
                      Name=Done;
                      CaptionML=[DEU=Erledigt;
                                 ENU=Done];
                      Promoted=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 TAPILog.INIT;
                                 IF TAPILog.GET(GUID) THEN BEGIN
                                   TAPILog.Reference := RefText;
                                   TAPILog.Note := NoteText;
                                   TAPILog.Closed := TRUE;
                                   TAPILog.MODIFY;
                                 END;

                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 9   ;1   ;Field     ;
                CaptionML=[DEU=Suche;
                           ENU=Find];
                SourceExpr=TextFound;
                Editable=FALSE;
                Style=Standard;
                StyleExpr=TRUE }

    { 1000000013;1;Field  ;
                CaptionML=[DEU=Telefon-Nr.;
                           ENU=Phone No.];
                SourceExpr=PhoneNo;
                Editable=FALSE }

    { 1000000014;1;Field  ;
                CaptionML=[DEU=Name;
                           ENU=Name];
                SourceExpr=Name;
                Editable=FALSE;
                Style=Standard;
                StyleExpr=TRUE }

    { 1000000012;1;Field  ;
                CaptionML=[DEU=Herkunft;
                           ENU=Origin];
                SourceExpr=Origin;
                Editable=FALSE }

    { 1000000021;1;Field  ;
                CaptionML=[DEU=Herkunft-Nr.;
                           ENU=Origin No.];
                SourceExpr=OriginNr;
                Editable=FALSE }

    { 10  ;1   ;Field     ;
                Name=<ReferenceText>;
                CaptionML=[DEU=Bezug;
                           ENU=Reference];
                SourceExpr=RefText;
                OnValidate=BEGIN
                             IF STRLEN(RefText) = 1 THEN BEGIN
                               RefKurz := DELCHR(RefText, '<>');
                               RefKurz := UPPERCASE(RefKurz);
                               CASE COPYSTR(RefKurz,1,1) OF
                                 'N': RefText := 'Angebot Nr. ';
                                 'A': RefText := 'Auftrag Nr. ';
                                 'R': RefText := 'Reklamation Nr. ';
                               END;
                             END;
                           END;
                            }

    { 12  ;1   ;Field     ;
                CaptionML=[DEU=Bemerkung;
                           ENU=Note];
                SourceExpr=NoteText }

  }
  CODE
  {
    VAR
      Text001@1008 : TextConst 'DEU=Debitor;ENU=Customer';
      Text002@1010 : TextConst 'DEU=Kreditor;ENU=Vendor';
      Text003@1011 : TextConst 'DEU=Kontaktperson;ENU=Contact person';
      Text004@1012 : TextConst 'DEU=Interessent;ENU=Prospect';
      Cust@1000000003 : Record 18;
      Vend@1000000002 : Record 23;
      ContAtt@1029 : Record 5050;
      TAPIUser@1016 : Record 56783;
      TAPILog@1020 : Record 56780;
      TAPICallActions@1019 : Record 56785;
      TAPISetup@1022 : Record 56782;
      TAPIFu@1023 : Codeunit 56780;
      GUID@1000 : Text[40];
      Name@1005 : Text[50];
      PhoneNo@1003 : Text[30];
      Origin@1002 : Text[30];
      OriginNr@1001 : Text[30];
      TextFound@1004 : Text[30];
      RefText@1018 : Text[30];
      RefKurz@1024 : Text[1];
      NoteText@1017 : Text[80];
      Text005@1014 : TextConst 'DEU=Telefonnr. gefunden;ENU=Phone No. found';
      Text006@1015 : TextConst 'DEU=Telefonnr. nicht gefunden;ENU=Phone No. not found';
      OriginKey1@1021 : Code[20];
      OriginKey2@1013 : Code[20];
      OriginTab@1009 : Integer;
      EntryNo@1007 : Integer;
      LfdNr@1032 : Integer;
      Found@1006 : Boolean;
      Text007@1000000005 : TextConst 'DEU=FÅr Benutzer %1 ist keine Telefonie eingerichtet.;ENU=For User %1 there exists no Phone Setup.';
      Text008@1030 : TextConst 'DEU=Kontakt;ENU=Contact';
      CallBackEnable@19050219 : Boolean INDATASET;
      Text19044136@19057201 : TextConst 'DEU=Abschlu· Anruf eingehend:;ENU=End of Call in:';

    PROCEDURE DefVar@1(NewGUID@1005 : Text[40];NewFound@1006 : Boolean;NewName@1000 : Text[50];NewPhoneNo@1001 : Text[30];NewOriginTab@1002 : Integer;NewOriginKey1@1003 : Code[20];NewOriginKey2@1004 : Code[20]);
    BEGIN
      GUID := NewGUID;
      Found := NewFound;
      Name := NewName;
      PhoneNo := NewPhoneNo;
      OriginTab := NewOriginTab;
      OriginKey1 := NewOriginKey1;
      OriginKey2 := NewOriginKey2;
      IF Found THEN BEGIN
        CASE OriginTab OF
          // Customer / Debitor
          18:
            BEGIN
              Origin := Text001;
              OriginNr := DELCHR(OriginKey1,'<>');
            END;
          // Vendor / Kreditor
          23:
            BEGIN
              Origin := Text002;
              OriginNr := DELCHR(OriginKey1,'<>');
            END;
          // Contact / Kontakt
          5050:
            BEGIN
              Origin := Text008;
              OriginNr := DELCHR(OriginKey1,'<>');
            END;
          ELSE BEGIN
            Origin := '';
            OriginNr := '';
          END;
          // AT2011 TextFound transferred to OnOpenPage
        END;
      END ELSE BEGIN
        Origin := '';
        OriginNr := '';
        // AT2011 TextFound transferred to OnOpenPage
      END;
    END;

    BEGIN
    {
      AT05.00    16.06.2007  Length of all name-fields changed form 30 to 50
      AT2009     06.11.2009  Button "Call back", if found
      AT2011     05.04.2011  Changes for RTC (Order of buttons),
                             Old Code deleted, TextFound transferred to OnOpenPage
                 08.04.2011  Error text found corrected
    }
    END.
  }
}

OBJECT Page 56789 End of Call out
{
  OBJECT-PROPERTIES
  {
    Date=08.04.11;
    Time=18:00:00;
    Modified=Yes;
    Version List=AT2011;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Abschlu· Telefonat ausgehend;
               ENU=End of call out];
    InsertAllowed=No;
    DeleteAllowed=No;
    PageType=Card;
    OnInit=BEGIN
             CreaInteractionLogEnable := TRUE;
             TryAgainEnable := TRUE;
             CreaInteractionLogVisible := TRUE;
           END;

    OnOpenPage=BEGIN
                 IF TAPIFu.TAPIRights < 2 THEN
                   ERROR(Text007,USERID);

                 TAPISetup.GET;

                 TAPIUser.INIT;
                 IF TAPIUser.GET(USERID) THEN;

                 // AT04.00 BEGIN
                 TAPILog.INIT;
                 IF (TAPILog.GET(GUID)) AND (TAPILog.State = TAPILog.State::"not connected") THEN
                   TryAgainEnable := TRUE
                 ELSE
                   TryAgainEnable := FALSE;
                 // AT04.00 END

                 RefText := '';
                 NoteText := '';

                 // AT2009 BEGIN
                 IF (TAPISetup."Create Interaction Log Entry") AND (Found) THEN BEGIN
                   CreaInteractionLogVisible := TRUE;
                   CreaInteractionLogEnable := TRUE;
                 END ELSE BEGIN
                   CreaInteractionLogEnable := FALSE;
                   CreaInteractionLogVisible := FALSE;
                 END;
                 // AT2009 END

                 // AT2011 START
                 IF Found THEN
                   TextFound := Text005
                 ELSE
                   TextFound := Text006;
                 // AT2011 END
               END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000001;1 ;Action    ;
                      Name=CreaInteractionLog;
                      CaptionML=[DEU=Akt.-Protokoll erst.;
                                 ENU=Create Interact. Log];
                      Promoted=Yes;
                      Visible=CreaInteractionLogVisible;
                      Enabled=CreaInteractionLogEnable;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 // AT2009 BEGIN
                                 TAPILog.INIT;
                                 Verb := FALSE;
                                 IF TAPILog.GET(GUID) THEN BEGIN
                                   TAPILog.Closed := TRUE;
                                   TAPILog.Reference := RefText;
                                   TAPILog.Note := NoteText;
                                   TAPILog.MODIFY;
                                   IF TAPILog.State = TAPILog.State::connected THEN
                                     Verb := TRUE;
                                 END;

                                 CurrPage.EDITABLE(FALSE);
                                 TAPIFu.CreateInteractLogEntry(GUID, Found, Name, PhoneNo, OriginTab, OriginKey1, OriginKey2, Verb);
                                 CurrPage.CLOSE;
                                 // AT2009 END
                               END;
                                }
      { 1000000000;1 ;Action    ;
                      Name=TryAgain;
                      CaptionML=[DEU=Erneut anrufen;
                                 ENU=Dial again];
                      Promoted=Yes;
                      Enabled=TryAgainEnable;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 // AT04.00 BEGIN
                                 TAPILog.INIT;
                                 IF TAPILog.GET(GUID) THEN BEGIN
                                   TAPILog.Closed := TRUE;
                                   TAPILog.Reference := RefText;
                                   TAPILog.Note := NoteText;
                                   TAPILog.MODIFY;
                                 END;
                                 CurrPage.CLOSE;

                                 TAPIFu.DialNo(PhoneNo);
                                 // AT04.00 END
                               END;
                                }
      { 3       ;1   ;Action    ;
                      Name=Done;
                      CaptionML=[DEU=Erledigt;
                                 ENU=Done];
                      Promoted=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 TAPILog.INIT;
                                 IF TAPILog.GET(GUID) THEN BEGIN
                                   TAPILog.Closed := TRUE;
                                   TAPILog.Reference := RefText;
                                   TAPILog.Note := NoteText;
                                   TAPILog.MODIFY;
                                 END;

                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 9   ;1   ;Field     ;
                CaptionML=[DEU=Suche;
                           ENU=Find];
                SourceExpr=TextFound;
                Editable=FALSE;
                Style=Standard;
                StyleExpr=TRUE }

    { 1000000013;1;Field  ;
                CaptionML=[DEU=Telefon-Nr.;
                           ENU=Phone No.];
                SourceExpr=PhoneNo;
                Editable=FALSE }

    { 1000000014;1;Field  ;
                CaptionML=[DEU=Name;
                           ENU=Name];
                SourceExpr=Name;
                Editable=FALSE;
                Style=Standard;
                StyleExpr=TRUE }

    { 1000000012;1;Field  ;
                CaptionML=[DEU=Herkunft;
                           ENU=Origin];
                SourceExpr=Origin;
                Editable=FALSE }

    { 1000000021;1;Field  ;
                CaptionML=[DEU=Herkunft-Nr.;
                           ENU=Origin No.];
                SourceExpr=OriginNr;
                Editable=FALSE }

    { 10  ;1   ;Field     ;
                Name=<ReferenceText>;
                CaptionML=[DEU=Bezug;
                           ENU=Reference];
                SourceExpr=RefText;
                OnValidate=BEGIN
                             IF STRLEN(RefText) = 1 THEN BEGIN
                               RefKurz := DELCHR(RefText, '<>');
                               RefKurz := UPPERCASE(RefKurz);
                               CASE COPYSTR(RefKurz,1,1) OF
                                 'N': RefText := 'Angebot Nr. ';
                                 'A': RefText := 'Auftrag Nr. ';
                                 'R': RefText := 'Reklamation Nr. ';
                               END;
                             END;
                           END;
                            }

    { 12  ;1   ;Field     ;
                CaptionML=[DEU=Bemerkung;
                           ENU=Note];
                SourceExpr=NoteText }

  }
  CODE
  {
    VAR
      Text001@1008 : TextConst 'DEU=Debitor;ENU=Customer';
      Text002@1010 : TextConst 'DEU=Kreditor;ENU=Vendor';
      Text003@1011 : TextConst 'DEU=Kontaktperson;ENU=Contact person';
      Text004@1012 : TextConst 'DEU=Interessent;ENU=Prospect';
      Cust@1000000003 : Record 18;
      Vend@1000000002 : Record 23;
      ContAtt@1025 : Record 5050;
      TAPIUser@1016 : Record 56783;
      TAPILog@1020 : Record 56780;
      TAPISetup@1022 : Record 56782;
      TAPIFu@1023 : Codeunit 56780;
      GUID@1000 : Text[40];
      Name@1005 : Text[50];
      PhoneNo@1003 : Text[30];
      Origin@1002 : Text[30];
      OriginNr@1001 : Text[30];
      TextFound@1004 : Text[30];
      RefText@1018 : Text[30];
      RefKurz@1000000004 : Text[30];
      NoteText@1017 : Text[80];
      OriginKey1@1007 : Code[20];
      OriginKey2@1006 : Code[20];
      OriginTab@1009 : Integer;
      EntryNo@1021 : Integer;
      LfdNr@1034 : Integer;
      Found@1013 : Boolean;
      Text005@1014 : TextConst 'DEU=Telefonnr. gefunden;ENU=Phone No. found';
      Text006@1015 : TextConst 'DEU=Telefonnr. nicht gefunden;ENU=Phone No. not found';
      Text007@1000000005 : TextConst 'DEU=FÅr Benutzer %1 ist keine Telefonie eingerichtet.;ENU=For User %1 there exists no Phone Setup.';
      Text008@1026 : TextConst 'DEU=Kontakt;ENU=Contact';
      Verb@1000000000 : Boolean;
      CreaInteractionLogVisible@19011882 : Boolean INDATASET;
      TryAgainEnable@19040024 : Boolean INDATASET;
      CreaInteractionLogEnable@19036515 : Boolean INDATASET;

    PROCEDURE DefVar@1(NewGUID@1005 : Text[40];NewFound@1006 : Boolean;NewName@1000 : Text[50];NewPhoneNo@1001 : Text[30];NewOriginTab@1002 : Integer;NewOriginKey1@1003 : Code[20];NewOriginKey2@1004 : Code[20]);
    BEGIN
      GUID := NewGUID;
      Found := NewFound;
      Name := NewName;
      PhoneNo := NewPhoneNo;
      OriginTab := NewOriginTab;
      OriginKey1 := NewOriginKey1;
      OriginKey2 := NewOriginKey2;
      IF Found THEN BEGIN
        CASE OriginTab OF
          // Customer / Debitor
          18:
            BEGIN
              Origin := Text001;
              OriginNr := DELCHR(OriginKey1,'<>');
            END;
          // Vendor / Kreditor
          23:
            BEGIN
              Origin := Text002;
              OriginNr := DELCHR(OriginKey1,'<>');
            END;
          // Kontaktperson
          5050:
            BEGIN
              Origin := Text008;
              OriginNr := DELCHR(OriginKey1,'<>');
            END;
          ELSE BEGIN
            Origin := '';
            OriginNr := '';
          END;
          // AT2011 TextFound transferred to OnOpenPage
        END;
      END ELSE BEGIN
        Origin := '';
        OriginNr := '';
        // AT2011 TextFound transferred to OnOpenPageEND;
      END;
    END;

    BEGIN
    {
      AT04.00    04.11.2005  Dial again if not connected
      AT05.00    16.06.2007  Length of all name-fields changed form 30 to 50
      AT2009     06.11.2009  Option Create Interaction Log Entry
      AT2011     05.04.2011  Changes for RTC (Order of buttons),
                             delete old Code, TextFound transferred to OnOpenPage
    }
    END.
  }
}

OBJECT Page 56790 Phone Indexes
{
  OBJECT-PROPERTIES
  {
    Date=05.04.11;
    Time=17:00:00;
    Modified=Yes;
    Version List=AT2011;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Telefon-Indices;
               ENU=Phone Indexes];
    SourceTable=Table56781;
    PageType=List;
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr="Table of origin" }

    { 4   ;2   ;Field     ;
                SourceExpr="No. of origin" }

    { 6   ;2   ;Field     ;
                SourceExpr="No. 2 of origin" }

    { 8   ;2   ;Field     ;
                SourceExpr="Type of origin" }

    { 10  ;2   ;Field     ;
                SourceExpr="Name of origin" }

    { 12  ;2   ;Field     ;
                SourceExpr="Phone No." }

  }
  CODE
  {

    BEGIN
    {
      AT2011   05.04.2011   Page created
    }
    END.
  }
}

OBJECT Page 56791 Notes for Phone-Index
{
  OBJECT-PROPERTIES
  {
    Date=05.04.11;
    Time=17:00:00;
    Modified=Yes;
    Version List=AT2011;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Hinweise fÅr Telefon-Index;
               ENU=Notes for Phone-Index];
    SourceTable=Table56785;
    PageType=List;
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                SourceExpr="Lfd.Nr." }

    { 4   ;2   ;Field     ;
                SourceExpr=Text }

  }
  CODE
  {

    BEGIN
    {
      At2011   05.04.2011   Page created
    }
    END.
  }
}

OBJECT Page 56792 Find Phone No.
{
  OBJECT-PROPERTIES
  {
    Date=11.05.13;
    Time=11:00:00;
    Modified=Yes;
    Version List=AT2013;
  }
  PROPERTIES
  {
    CaptionML=[DEU=Telefonnr. suchen;
               ENU=Find Phone No.];
    SaveValues=Yes;
    SourceTable=Table56786;
    PageType=NavigatePage;
    OnInit=BEGIN
             ShowEnable := TRUE;
           END;

    OnOpenPage=BEGIN
                 PhoneNo := '';
                 ShowEnable := FALSE;
                 RESET;
                 DELETEALL;
               END;

    OnFindRecord=BEGIN
                   PhoneIndexTemp := Rec;
                   IF NOT PhoneIndexTemp.FIND(Which) THEN
                     EXIT(FALSE);
                   Rec := PhoneIndexTemp;
                   EXIT(TRUE);
                 END;

    OnNextRecord=VAR
                   CurrentSteps@1001 : Integer;
                 BEGIN
                   PhoneIndexTemp := Rec;
                   CurrentSteps := PhoneIndexTemp.NEXT(Steps);
                   IF CurrentSteps <> 0 THEN
                     Rec := PhoneIndexTemp;
                   EXIT(CurrentSteps);
                 END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 21      ;1   ;Action    ;
                      Name=Show;
                      CaptionML=[DEU=An&zeigen;
                                 ENU=&Show];
                      Promoted=Yes;
                      Enabled=ShowEnable;
                      Image=View;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ShowRecords;
                               END;
                                }
      { 2       ;1   ;Action    ;
                      CaptionML=[DEU=&Suchen;
                                 ENU=Fi&nd];
                      Promoted=Yes;
                      Image=Find;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 RESET;
                                 DELETEALL;

                                 IF STRLEN(PhoneNo) > 1 THEN BEGIN
                                   IF COPYSTR(PhoneNo,1,1) = '0' THEN BEGIN
                                     Len := STRLEN(PhoneNo);
                                     PhoneNo := COPYSTR(PhoneNo, 2,Len-1);
                                   END;
                                 END;

                                 PhoneNoClean := CONVERTSTR(PhoneNo,'-_+()/','      ');
                                 PhoneNoClean := DELCHR(PhoneNoClean, '<=>');
                                 PhoneNo := PhoneNoClean;
                                 FindRecords;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 3   ;1   ;Field     ;
                CaptionML=[DEU=Gesuchte Telefonnr.;
                           ENU=Phone No. to find];
                SourceExpr=PhoneNo }

    { 16  ;1   ;Group     ;
                Name=Results;
                Editable=FALSE;
                GroupType=Repeater }

    { 1000000000;2;Field  ;
                Name=TableName;
                SourceExpr="Table Name" }

    { 1000000002;2;Field  ;
                SourceExpr="No. of origin" }

    { 1000000004;2;Field  ;
                SourceExpr="Name of origin" }

    { 1000000006;2;Field  ;
                SourceExpr="Phone No." }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Keinen Eintrag mit dieser Telefonnummer gefunden.;ENU=No Entry found with this Phone No.';
      Text001@1002 : TextConst 'DEU=DatensÑtze werden gezÑhlt...;ENU=Counting records...';
      Text003@1003 : TextConst 'DEU=Geb. Verkaufsrechnung;ENU=Posted Sales Invoice';
      Text004@1004 : TextConst 'DEU=Geb. Verkaufsgutschrift;ENU=Posted Sales Credit Memo';
      Text005@1005 : TextConst 'DEU=Geb. Verkaufslieferung;ENU=Posted Sales Shipment';
      Text006@1006 : TextConst 'DEU=Registrierte Mahnung;ENU=Issued Reminder';
      Text007@1007 : TextConst 'DEU=Registrierte Zinsrechnungen;ENU=Issued Finance Charge Memo';
      Text008@1008 : TextConst 'DEU=Geb. Einkaufsrechnung;ENU=Posted Purchase Invoice';
      Text009@1009 : TextConst 'DEU=Geb. Einkaufsgutschrift;ENU=Posted Purchase Credit Memo';
      Text010@1010 : TextConst 'DEU=Geb. Einkaufslieferung;ENU=Posted Purchase Receipt';
      Text011@1011 : TextConst 'DEU=Die Belegnummer wurde mehrmals verwendet.;ENU=The document number has been used more than once.';
      Text012@1012 : TextConst 'DEU=Diese Kombination von Belegnummer und Buchungsdatum wurde mehrmals verwendet.;ENU=This combination of document number and posting date has been used more than once.';
      Text013@1013 : TextConst 'DEU=Es gibt keine geb. DatensÑtze mit dieser Belegnummer.;ENU=There are no posted records with this document number.';
      Text014@1014 : TextConst 'DEU=Es gibt keine DatensÑtze mit dieser Kombination aus Belegnummer und Buchungsdatum.;ENU=There are no posted records with this combination of document number and posting date.';
      Text015@1015 : TextConst 'DEU=Die Suche ergibt zu viele externe Belege. Bitte geben Sie eine Kontaktnr. an.;ENU=The search results in too many external documents. Please specify a business contact no.';
      Text016@1016 : TextConst 'DEU=Das Suchergebnis ist in zu vielen externen Belegen. Bitte verwenden Sie Navigate auf den relevanten Posten.;ENU=The search results in too many external documents. Please use Navigate from the relevant ledger entries.';
      Text017@1017 : TextConst 'DEU=Gebuchte RÅcksendung;ENU=Posted Return Receipt';
      Text018@1018 : TextConst 'DEU=Gebuchte RÅcklieferung;ENU=Posted Return Shipment';
      Text019@1019 : TextConst 'DEU=Geb. Umlag.-Ausgang;ENU=Posted Transfer Shipment';
      Text020@1020 : TextConst 'DEU=Geb. Umlag.-Eingang;ENU=Posted Transfer Receipt';
      Text021@1061 : TextConst 'DEU=Verkaufsauftrag;ENU=Sales Order';
      Text022@1080 : TextConst 'DEU=Verkaufsrechnung;ENU=Sales Invoice';
      Text023@1081 : TextConst 'DEU=Verkaufsreklamation;ENU=Sales Return Order';
      Text024@1082 : TextConst 'DEU=Verkaufsgutschrift;ENU=Sales Credit Memo';
      Text99000000@1021 : TextConst 'DEU=Fertigungsauftrag;ENU=Production Order';
      PhoneNo@1000000000 : Text[30];
      PhoneNoClean@1000000002 : Text[30];
      EntryExists@1000000003 : Boolean;
      PhoneIndex@1000000004 : Record 56781;
      PhoneIndexTemp@1000000001 : Record 56786;
      Window@1000000006 : Dialog;
      Cust@1000000007 : Record 18;
      Vend@1000000008 : Record 23;
      Cont@1000000009 : Record 5050;
      Len@1000000005 : Integer;
      ShowEnable@19017131 : Boolean INDATASET;

    LOCAL PROCEDURE FindRecords@2();
    BEGIN
      Window.OPEN(Text001);
      PhoneIndex.RESET;
      PhoneIndex.SETCURRENTKEY("Phone No.");
      // PhoneIndex.SETRANGE("Phone No.", PhoneNoClean);
      IF PhoneIndex.FIND('-') THEN BEGIN
        REPEAT
          IF STRPOS(PhoneIndex."Phone No.", PhoneNoClean) > 0 THEN BEGIN
            TRANSFERFIELDS(PhoneIndex);
            CASE PhoneIndex."Table of origin" OF
              18: "Table Name" := Cust.TABLECAPTION;
              23: "Table Name" := Vend.TABLECAPTION;
              5050: "Table Name" := Cont.TABLECAPTION;
              ELSE
                "Table Name" := FORMAT(PhoneIndex."Table of origin");
            END;
            INSERT;
          END;
        UNTIL PhoneIndex.NEXT = 0;
        Window.CLOSE;
        EntryExists := TRUE;
        UpdatePageAfterFindRecords;
      END ELSE BEGIN
        Window.CLOSE;
        MESSAGE(Text000);
      END;
    END;

    LOCAL PROCEDURE UpdatePageAfterFindRecords@15();
    BEGIN
      ShowEnable := EntryExists;
      CurrPage.UPDATE(FALSE);
      EntryExists := FIND('-');
      IF EntryExists THEN;
    END;

    LOCAL PROCEDURE ShowRecords@6();
    BEGIN
      PhoneIndexTemp := Rec;
      CASE PhoneIndexTemp."Table of origin" OF
        DATABASE::Customer:
          BEGIN
            Cust.RESET;
            Cust.SETRANGE("No.", "No. of origin");
            IF Cust.FIND('-') THEN
      // AT2013 CHANGED
              PAGE.RUN(21,Cust);
          END;
        DATABASE::Vendor:
          BEGIN
            Vend.RESET;
            Vend.SETRANGE("No.", "No. of origin");
            IF Vend.FIND('-') THEN
      // AT2013 CHANGED
              PAGE.RUN(26,Vend);
          END;
        DATABASE::Contact:
          BEGIN
            Cont.RESET;
            Cont.SETRANGE("No.", "No. of origin");
            IF Cust.FIND('-') THEN
      // AT2013 CHANGED
              PAGE.RUN(5050,Cont);
          END;
      END;
    END;

    BEGIN
    {
      AT04.00    04.11.2005   Created
      AT2009     26.08.2010   New compiled (change in table 56786 Phone Index Temp)
      AT2011     05.04.2011   Page created
      AT2013     11.05.2013   Form replaced by Page
                              Function renamed UpdatePageAfterFindRecords
    }
    END.
  }
}

